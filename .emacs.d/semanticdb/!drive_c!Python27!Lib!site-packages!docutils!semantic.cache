;; Object docutils/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "docutils/"
  :tables
  (list
    (semanticdb-table "statemachine.py"
      :file "statemachine.py"
      :fsize 57572
      :lastmodtime '(21915 35728 0 0))
    (semanticdb-table "io.py"
      :file "io.py"
      :fsize 17048
      :lastmodtime '(21915 35728 0 0))
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
This is the Docutils (Python Documentation Utilities) package.

Package Structure
=================

Modules:

- __init__.py: Contains component base classes, exception classes, and
  Docutils version information.

- core.py: Contains the ``Publisher`` class and ``publish_*()`` convenience
  functions.

- frontend.py: Runtime settings (command-line interface, configuration files)
  processing, for Docutils front-ends.

- io.py: Provides a uniform API for low-level input and output.

- nodes.py: Docutils document tree (doctree) node class library.

- statemachine.py: A finite state machine specialized for
  regular-expression-based text filters.

Subpackages:

- languages: Language-specific mappings of terms.

- parsers: Syntax-specific input parser modules or packages.

- readers: Context-specific input handlers which understand the data
  source and manage a parser.

- transforms: Modules used by readers and writers to modify DPS
  doctrees.

- utils: Contains the ``Reporter`` system warning class and miscellaneous
  utilities used by readers, writers, and transforms.

  utils/urischemes.py: Contains a complete mapping of known URI addressing
  scheme names to descriptions.

- utils/math: Contains functions for conversion of mathematical notation
  between different formats (LaTeX, MathML, text, ...).

- writers: Format-specific output translators.
\"\"\"" code nil nil [165 1544])
            ("__docformat__" variable nil nil [1546 1580])
            ("__version__" variable nil nil [1582 1602])
            ("\"\"\"``major.minor.micro`` version number.  The micro number is bumped for API
changes, for new functionality, and for interim project releases.  The minor
number is bumped whenever there is a significant project release.  The major
number will be bumped when the project is feature-complete, and perhaps if
there is a major change in the design.\"\"\"" code nil nil [1603 1950])
            ("__version_details__" variable nil nil [1952 1983])
            ("\"\"\"Extra version details (e.g. 'snapshot 2005-05-29, r3410', 'repository',
'release'), modified automatically & manually.\"\"\"" code nil nil [1984 2108])
            ("sys" include nil nil [2110 2120])
            ("ApplicationError" type
               (:superclasses ("StandardError")
                :members 
                  ( ("if" code nil (reparse-symbol indented_block_body) [2356 2457]))                  
                :type "class")
                nil [2122 2457])
            ("DataError" type
               (:superclasses ("ApplicationError")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [2458 2498])
            ("SettingsSpec" type
               (:documentation "
    Runtime setting specification base class.

    SettingsSpec subclass objects used by `docutils.frontend.OptionParser`.
    "
                :members 
                  ( ("settings_spec" variable nil (reparse-symbol indented_block_body) [2665 2683])
                    ("\"\"\"Runtime settings specification.  Override in subclasses.

    Defines runtime settings and associated command-line options, as used by
    `docutils.frontend.OptionParser`.  This is a tuple of:

    - Option group title (string or `None` which implies no group, just a list
      of single options).

    - Description (string or `None`).

    - A sequence of option tuples.  Each consists of:

      - Help text (string)

      - List of option strings (e.g. ``['-Q', '--quux']``).

      - Dictionary of keyword arguments sent to the OptionParser/OptionGroup
        ``add_option`` method.

        Runtime setting names are derived implicitly from long option names
        ('--a-setting' becomes ``settings.a_setting``) or explicitly from the
        'dest' keyword argument.

        Most settings will also have a 'validator' keyword & function.  The
        validator function validates setting values (from configuration files
        and command-line option arguments) and converts them to appropriate
        types.  For example, the ``docutils.frontend.validate_boolean``
        function, **required by all boolean settings**, converts true values
        ('1', 'on', 'yes', and 'true') to 1 and false values ('0', 'off',
        'no', 'false', and '') to 0.  Validators need only be set once per
        setting.  See the `docutils.frontend.validate_*` functions.

        See the optparse docs for more details.

    - More triples of group title, description, options, as many times as
      needed.  Thus, `settings_spec` tuples can be simply concatenated.
    \"\"\"" code nil (reparse-symbol indented_block_body) [2688 4271])
                    ("settings_defaults" variable nil (reparse-symbol indented_block_body) [4277 4301])
                    ("\"\"\"A dictionary of defaults for settings not in `settings_spec` (internal
    settings, intended to be inaccessible by command-line and config file).
    Override in subclasses.\"\"\"" code nil (reparse-symbol indented_block_body) [4306 4486])
                    ("settings_default_overrides" variable nil (reparse-symbol indented_block_body) [4492 4525])
                    ("\"\"\"A dictionary of auxiliary defaults, to override defaults for settings
    defined in other components.  Override in subclasses.\"\"\"" code nil (reparse-symbol indented_block_body) [4530 4663])
                    ("relative_path_settings" variable nil (reparse-symbol indented_block_body) [4669 4696])
                    ("\"\"\"Settings containing filesystem paths.  Override in subclasses.
    Settings listed here are to be interpreted relative to the current working
    directory.\"\"\"" code nil (reparse-symbol indented_block_body) [4701 4863])
                    ("config_section" variable nil (reparse-symbol indented_block_body) [4869 4890])
                    ("\"\"\"The name of the config file section specific to this component
    (lowercase, no brackets).  Override in subclasses.\"\"\"" code nil (reparse-symbol indented_block_body) [4895 5018])
                    ("config_section_dependencies" variable nil (reparse-symbol indented_block_body) [5024 5058])
                    ("\"\"\"A list of names of config file sections that are to be applied before
    `config_section`, in order (from general to specific).  In other words,
    the settings in `config_section` are to be overlaid on top of the settings
    from these sections.  The \"general\" section is assumed implicitly.
    Override in subclasses.\"\"\"" code nil (reparse-symbol indented_block_body) [5063 5392]))                  
                :type "class")
                nil [2500 5393])
            ("TransformSpec" type
               (:documentation "
    Runtime transform specification base class.

    TransformSpec subclass objects used by `docutils.transforms.Transformer`.
    "
                :members 
                  ( ("get_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5584 5588]))                          
                        :documentation "Transforms required by this class.  Override in subclasses.")
                        (reparse-symbol indented_block_body) [5565 5985])
                    ("default_transforms" variable nil (reparse-symbol indented_block_body) [6027 6050])
                    ("unknown_reference_resolvers" variable nil (reparse-symbol indented_block_body) [6056 6088])
                    ("\"\"\"List of functions to try to resolve unknown references.  Unknown
    references have a 'refname' attribute which doesn't correspond to any
    target in the document.  Called when the transforms in
    `docutils.tranforms.references` are unable to find a correct target.  The
    list should contain functions which will try to resolve unknown
    references, with the following signature::

        def reference_resolver(node):
            '''Returns boolean: true if resolved, false if not.'''

    If the function is able to resolve the reference, it should also remove
    the 'refname' attribute and mark the node as resolved::

        del node['refname']
        node.resolved = 1

    Each function must have a \"priority\" attribute which will affect the order
    the unknown_reference_resolvers are run::

        reference_resolver.priority = 100

    Override in subclasses.\"\"\"" code nil (reparse-symbol indented_block_body) [6093 6985]))                  
                :type "class")
                nil [5395 6986])
            ("Component" type
               (:documentation "Base class for Docutils components."
                :superclasses ("SettingsSpec" "TransformSpec")
                :members 
                  ( ("component_type" variable nil (reparse-symbol indented_block_body) [7086 7107])
                    ("\"\"\"Name of the component type ('reader', 'parser', 'writer').  Override in
    subclasses.\"\"\"" code nil (reparse-symbol indented_block_body) [7112 7205])
                    ("supported" variable nil (reparse-symbol indented_block_body) [7211 7225])
                    ("\"\"\"Names for this component.  Override in subclasses.\"\"\"" code nil (reparse-symbol indented_block_body) [7230 7286])
                    ("supports" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7305 7309])
                            ("format" variable nil (reparse-symbol function_parameters) [7311 7317]))                          
                        :documentation "
        Is `format` supported by this component?

        To be used by transforms to ask the dependent component if it supports
        a certain input context or output format.
        ")
                        (reparse-symbol indented_block_body) [7292 7563]))                  
                :type "class")
                nil [6988 7563]))          
      :file "__init__.py"
      :pointmax 7563
      :fsize 7562
      :lastmodtime '(21915 35728 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "examples.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
This module contains practical examples of Docutils client code.

Importing this module from client code is not recommended; its contents are
subject to change in future Docutils releases.  Instead, it is recommended
that you copy and paste the parts you need into your own code, modifying as
necessary.
\"\"\"" code nil nil [163 474])
            ("docutils" include nil nil [476 505])
            ("html_parts" function
               (:documentation "
    Given an input string, returns a dictionary of HTML document parts.

    Dictionary keys are the names of parts, and values are Unicode strings;
    encoding is up to the client.

    Parameters:

    - `input_string`: A multi-line text string; required.
    - `source_path`: Path to the source file or object.  Optional, but useful
      for diagnostic output (system messages).
    - `destination_path`: Path to the file or object which will receive the
      output; optional.  Used for determining relative paths (stylesheets,
      source links, etc.).
    - `input_encoding`: The encoding of `input_string`.  If it is an encoded
      8-bit string, provide the correct encoding.  If it is a Unicode string,
      use \"unicode\", the default.
    - `doctitle`: Disable the promotion of a lone top-level section title to
      document title (and subsequent section title to document subtitle
      promotion); enabled by default.
    - `initial_header_level`: The initial level for header elements (e.g. 1
      for \"<h1>\").
    "
                :arguments 
                  ( ("input_string" variable nil (reparse-symbol function_parameters) [523 535])
                    ("source_path" variable nil (reparse-symbol function_parameters) [537 548])
                    ("destination_path" variable nil (reparse-symbol function_parameters) [555 571])
                    ("input_encoding" variable nil (reparse-symbol function_parameters) [593 607])
                    ("doctitle" variable nil (reparse-symbol function_parameters) [619 627])
                    ("initial_header_level" variable nil (reparse-symbol function_parameters) [649 669]))                  )
                nil [508 2086])
            ("html_body" function
               (:documentation "
    Given an input string, returns an HTML fragment as a string.

    The return value is the contents of the <body> element.

    Parameters (see `html_parts()` for the remainder):

    - `output_encoding`: The desired encoding of the output.  If a Unicode
      string is desired, use the default value of \"unicode\" .
    "
                :arguments 
                  ( ("input_string" variable nil (reparse-symbol function_parameters) [2101 2113])
                    ("source_path" variable nil (reparse-symbol function_parameters) [2115 2126])
                    ("destination_path" variable nil (reparse-symbol function_parameters) [2133 2149])
                    ("input_encoding" variable nil (reparse-symbol function_parameters) [2170 2184])
                    ("output_encoding" variable nil (reparse-symbol function_parameters) [2196 2211])
                    ("doctitle" variable nil (reparse-symbol function_parameters) [2237 2245])
                    ("initial_header_level" variable nil (reparse-symbol function_parameters) [2252 2272]))                  )
                nil [2087 2992])
            ("internals" function
               (:documentation "
    Return the document tree and publisher, for exploring Docutils internals.

    Parameters: see `html_parts()`.
    "
                :arguments 
                  ( ("input_string" variable nil (reparse-symbol function_parameters) [3007 3019])
                    ("source_path" variable nil (reparse-symbol function_parameters) [3021 3032])
                    ("destination_path" variable nil (reparse-symbol function_parameters) [3039 3055])
                    ("input_encoding" variable nil (reparse-symbol function_parameters) [3076 3090])
                    ("settings_overrides" variable nil (reparse-symbol function_parameters) [3102 3120]))                  )
                nil [2993 3960]))          
      :file "examples.py"
      :pointmax 3960
      :fsize 3959
      :lastmodtime '(21915 35728 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "nodes.py"
      :major-mode 'python-mode
      :tags nil
      :file "nodes.py"
      :pointmax 77346
      :fsize 77345
      :lastmodtime '(21915 35728 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "core.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Calling the ``publish_*`` convenience functions (or instantiating a
`Publisher` object) with component names will result in default
behavior.  For custom behavior (setting component options), create
custom component objects first, and pass *them* to
``publish_*``/`Publisher`.  See `The Docutils Publisher`_.

.. _The Docutils Publisher: http://docutils.sf.net/docs/api/publisher.html
\"\"\"" code nil nil [159 551])
            ("__docformat__" variable nil nil [553 587])
            ("sys" include nil nil [589 599])
            ("pprint" include nil nil [600 613])
            ("docutils" include nil nil [614 681])
            ("docutils" include nil nil [682 740])
            ("docutils.frontend" include nil nil [741 783])
            ("docutils.transforms" include nil nil [784 827])
            ("docutils.utils.error_reporting" include nil nil [828 895])
            ("docutils.readers.doctree" include nil nil [896 927])
            ("Publisher" type
               (:documentation "
    A facade encapsulating the high-level logic of a Docutils system.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initial setup.  If any of `reader`, `parser`, or `writer` are not
        specified, the corresponding ``set_...`` method should be called with
        a component name (`set_reader` sets the parser as well).
        \"\"\"" code nil (reparse-symbol indented_block_body) [1262 1494])
                            ("self" variable nil (reparse-symbol indented_block_body) [1504 1524])
                            ("\"\"\"The document tree (`docutils.nodes` objects).\"\"\"" code nil (reparse-symbol indented_block_body) [1533 1584])
                            ("self" variable nil (reparse-symbol indented_block_body) [1594 1614])
                            ("\"\"\"A `docutils.readers.Reader` instance.\"\"\"" code nil (reparse-symbol indented_block_body) [1623 1666])
                            ("self" variable nil (reparse-symbol indented_block_body) [1676 1696])
                            ("\"\"\"A `docutils.parsers.Parser` instance.\"\"\"" code nil (reparse-symbol indented_block_body) [1705 1748])
                            ("self" variable nil (reparse-symbol indented_block_body) [1758 1778])
                            ("\"\"\"A `docutils.writers.Writer` instance.\"\"\"" code nil (reparse-symbol indented_block_body) [1787 1830])
                            ("for" code nil (reparse-symbol indented_block_body) [1840 2226])
                            ("self" variable nil (reparse-symbol indented_block_body) [2235 2255])
                            ("\"\"\"The source of input data, a `docutils.io.Input` instance.\"\"\"" code nil (reparse-symbol indented_block_body) [2264 2327])
                            ("self" variable nil (reparse-symbol indented_block_body) [2337 2369])
                            ("\"\"\"The class for dynamically created source objects.\"\"\"" code nil (reparse-symbol indented_block_body) [2378 2433])
                            ("self" variable nil (reparse-symbol indented_block_body) [2443 2473])
                            ("\"\"\"The destination for docutils output, a `docutils.io.Output`
        instance.\"\"\"" code nil (reparse-symbol indented_block_body) [2482 2565])
                            ("self" variable nil (reparse-symbol indented_block_body) [2575 2617])
                            ("\"\"\"The class for dynamically created destination objects.\"\"\"" code nil (reparse-symbol indented_block_body) [2626 2686])
                            ("self" variable nil (reparse-symbol indented_block_body) [2696 2720])
                            ("\"\"\"An object containing Docutils settings as instance attributes.
        Set by `self.process_command_line()` or `self.get_settings()`.\"\"\"" code nil (reparse-symbol indented_block_body) [2729 2868])
                            ("self" variable nil (reparse-symbol indented_block_body) [2878 2906]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1051 1055])
                            ("reader" variable nil (reparse-symbol function_parameters) [1057 1063])
                            ("parser" variable nil (reparse-symbol function_parameters) [1070 1076])
                            ("writer" variable nil (reparse-symbol function_parameters) [1083 1089])
                            ("source" variable nil (reparse-symbol function_parameters) [1113 1119])
                            ("source_class" variable nil (reparse-symbol function_parameters) [1126 1138])
                            ("destination" variable nil (reparse-symbol function_parameters) [1170 1181])
                            ("destination_class" variable nil (reparse-symbol function_parameters) [1188 1205])
                            ("settings" variable nil (reparse-symbol function_parameters) [1238 1246]))                          
                        :documentation "
        Initial setup.  If any of `reader`, `parser`, or `writer` are not
        specified, the corresponding ``set_...`` method should be called with
        a component name (`set_reader` sets the parser as well).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1038 2907])
                    ("set_reader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2927 2931])
                            ("reader_name" variable nil (reparse-symbol function_parameters) [2933 2944])
                            ("parser" variable nil (reparse-symbol function_parameters) [2946 2952])
                            ("parser_name" variable nil (reparse-symbol function_parameters) [2954 2965]))                          
                        :documentation "Set `self.reader` by name.")
                        (reparse-symbol indented_block_body) [2912 3167])
                    ("set_writer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3187 3191])
                            ("writer_name" variable nil (reparse-symbol function_parameters) [3193 3204]))                          
                        :documentation "Set `self.writer` by name.")
                        (reparse-symbol indented_block_body) [3172 3346])
                    ("set_components" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3370 3374])
                            ("reader_name" variable nil (reparse-symbol function_parameters) [3376 3387])
                            ("parser_name" variable nil (reparse-symbol function_parameters) [3389 3400])
                            ("writer_name" variable nil (reparse-symbol function_parameters) [3402 3413]))                          )
                        (reparse-symbol indented_block_body) [3351 3760])
                    ("setup_option_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3789 3793])
                            ("usage" variable nil (reparse-symbol function_parameters) [3795 3800])
                            ("description" variable nil (reparse-symbol function_parameters) [3807 3818])
                            ("settings_spec" variable nil (reparse-symbol function_parameters) [3853 3866])
                            ("config_section" variable nil (reparse-symbol function_parameters) [3873 3887])
                            ("defaults" variable nil (reparse-symbol function_parameters) [3922 3932]))                          )
                        (reparse-symbol indented_block_body) [3765 4607])
                    ("get_settings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4629 4633])
                            ("usage" variable nil (reparse-symbol function_parameters) [4635 4640])
                            ("description" variable nil (reparse-symbol function_parameters) [4647 4658])
                            ("settings_spec" variable nil (reparse-symbol function_parameters) [4686 4699])
                            ("config_section" variable nil (reparse-symbol function_parameters) [4706 4720])
                            ("defaults" variable nil (reparse-symbol function_parameters) [4727 4737]))                          
                        :documentation "
        Set and return default settings (overrides in `defaults` dict).

        Set components first (`self.set_reader` & `self.set_writer`).
        Explicitly setting `self.settings` disables command line option
        processing from `self.publish()`.
        ")
                        (reparse-symbol indented_block_body) [4612 5234])
                    ("process_programmatic_settings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5273 5277])
                            ("settings_spec" variable nil (reparse-symbol function_parameters) [5279 5292])
                            ("settings_overrides" variable nil (reparse-symbol function_parameters) [5332 5350])
                            ("config_section" variable nil (reparse-symbol function_parameters) [5390 5404]))                          )
                        (reparse-symbol indented_block_body) [5239 5785])
                    ("process_command_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5815 5819])
                            ("argv" variable nil (reparse-symbol function_parameters) [5821 5825])
                            ("usage" variable nil (reparse-symbol function_parameters) [5832 5837])
                            ("description" variable nil (reparse-symbol function_parameters) [5844 5855])
                            ("settings_spec" variable nil (reparse-symbol function_parameters) [5891 5904])
                            ("config_section" variable nil (reparse-symbol function_parameters) [5911 5925])
                            ("defaults" variable nil (reparse-symbol function_parameters) [5961 5971]))                          
                        :documentation "
        Pass an empty list to `argv` to avoid reading `sys.argv` (the
        default).

        Set components first (`self.set_reader` & `self.set_writer`).
        ")
                        (reparse-symbol indented_block_body) [5790 6699])
                    ("set_io" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6715 6719])
                            ("source_path" variable nil (reparse-symbol function_parameters) [6721 6732])
                            ("destination_path" variable nil (reparse-symbol function_parameters) [6739 6755]))                          )
                        (reparse-symbol indented_block_body) [6704 6953])
                    ("set_source" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6973 6977])
                            ("source" variable nil (reparse-symbol function_parameters) [6979 6985])
                            ("source_path" variable nil (reparse-symbol function_parameters) [6992 7003]))                          )
                        (reparse-symbol indented_block_body) [6958 7652])
                    ("set_destination" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7677 7681])
                            ("destination" variable nil (reparse-symbol function_parameters) [7683 7694])
                            ("destination_path" variable nil (reparse-symbol function_parameters) [7701 7717]))                          )
                        (reparse-symbol indented_block_body) [7657 8138])
                    ("apply_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8164 8168]))                          )
                        (reparse-symbol indented_block_body) [8143 8388])
                    ("publish" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8405 8409])
                            ("argv" variable nil (reparse-symbol function_parameters) [8411 8415])
                            ("usage" variable nil (reparse-symbol function_parameters) [8422 8427])
                            ("description" variable nil (reparse-symbol function_parameters) [8434 8445])
                            ("settings_spec" variable nil (reparse-symbol function_parameters) [8468 8481])
                            ("settings_overrides" variable nil (reparse-symbol function_parameters) [8488 8506])
                            ("config_section" variable nil (reparse-symbol function_parameters) [8529 8543])
                            ("enable_exit_status" variable nil (reparse-symbol function_parameters) [8550 8568]))                          
                        :documentation "
        Process command line options and arguments (if `self.settings` not
        already set), run `self.reader` and then `self.writer`.  Return
        `self.writer`'s output.
        ")
                        (reparse-symbol indented_block_body) [8393 10091])
                    ("debugging_dumps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10116 10120]))                          )
                        (reparse-symbol indented_block_body) [10096 11256])
                    ("report_Exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11282 11286])
                            ("error" variable nil (reparse-symbol function_parameters) [11288 11293]))                          )
                        (reparse-symbol indented_block_body) [11261 12312])
                    ("report_SystemMessage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12342 12346])
                            ("error" variable nil (reparse-symbol function_parameters) [12348 12353]))                          )
                        (reparse-symbol indented_block_body) [12317 12548])
                    ("report_UnicodeError" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12577 12581])
                            ("error" variable nil (reparse-symbol function_parameters) [12583 12588]))                          )
                        (reparse-symbol indented_block_body) [12553 13984]))                  
                :type "class")
                nil [929 13984])
            ("default_usage" variable nil nil [13985 14045])
            ("default_description" variable nil nil [14046 14313])
            ("publish_cmdline" function
               (:documentation "
    Set up & run a `Publisher` for command-line-based file I/O (input and
    output file paths taken automatically from the command line).  Return the
    encoded string output also.

    Parameters: see `publish_programmatically` for the remainder.

    - `argv`: Command-line argument list to use instead of ``sys.argv[1:]``.
    - `usage`: Usage string, output if there's a problem parsing the command
      line.
    - `description`: Program description, output for the \"--help\" option
      (along with command-line option descriptions).
    "
                :arguments 
                  ( ("reader" variable nil (reparse-symbol function_parameters) [14335 14341])
                    ("reader_name" variable nil (reparse-symbol function_parameters) [14348 14359])
                    ("parser" variable nil (reparse-symbol function_parameters) [14394 14400])
                    ("parser_name" variable nil (reparse-symbol function_parameters) [14407 14418])
                    ("writer" variable nil (reparse-symbol function_parameters) [14459 14465])
                    ("writer_name" variable nil (reparse-symbol function_parameters) [14472 14483])
                    ("settings" variable nil (reparse-symbol function_parameters) [14517 14525])
                    ("settings_spec" variable nil (reparse-symbol function_parameters) [14532 14545])
                    ("settings_overrides" variable nil (reparse-symbol function_parameters) [14572 14590])
                    ("config_section" variable nil (reparse-symbol function_parameters) [14597 14611])
                    ("enable_exit_status" variable nil (reparse-symbol function_parameters) [14638 14656])
                    ("argv" variable nil (reparse-symbol function_parameters) [14663 14667])
                    ("usage" variable nil (reparse-symbol function_parameters) [14694 14699])
                    ("description" variable nil (reparse-symbol function_parameters) [14715 14726]))                  )
                nil [14315 15625])
            ("publish_file" function
               (:documentation "
    Set up & run a `Publisher` for programmatic use with file-like I/O.
    Return the encoded string output also.

    Parameters: see `publish_programmatically`.
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [15643 15649])
                    ("source_path" variable nil (reparse-symbol function_parameters) [15656 15667])
                    ("destination" variable nil (reparse-symbol function_parameters) [15691 15702])
                    ("destination_path" variable nil (reparse-symbol function_parameters) [15709 15725])
                    ("reader" variable nil (reparse-symbol function_parameters) [15749 15755])
                    ("reader_name" variable nil (reparse-symbol function_parameters) [15762 15773])
                    ("parser" variable nil (reparse-symbol function_parameters) [15805 15811])
                    ("parser_name" variable nil (reparse-symbol function_parameters) [15818 15829])
                    ("writer" variable nil (reparse-symbol function_parameters) [15867 15873])
                    ("writer_name" variable nil (reparse-symbol function_parameters) [15880 15891])
                    ("settings" variable nil (reparse-symbol function_parameters) [15922 15930])
                    ("settings_spec" variable nil (reparse-symbol function_parameters) [15937 15950])
                    ("settings_overrides" variable nil (reparse-symbol function_parameters) [15957 15975])
                    ("config_section" variable nil (reparse-symbol function_parameters) [15999 16013])
                    ("enable_exit_status" variable nil (reparse-symbol function_parameters) [16020 16038]))                  )
                nil [15626 16806])
            ("publish_string" function
               (:documentation "
    Set up & run a `Publisher` for programmatic use with string I/O.  Return
    the encoded string or Unicode string output.

    For encoded string output, be sure to set the 'output_encoding' setting to
    the desired encoding.  Set it to 'unicode' for unencoded Unicode string
    output.  Here's one way::

        publish_string(..., settings_overrides={'output_encoding': 'unicode'})

    Similarly for Unicode string input (`source`)::

        publish_string(..., settings_overrides={'input_encoding': 'unicode'})

    Parameters: see `publish_programmatically`.
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [16826 16832])
                    ("source_path" variable nil (reparse-symbol function_parameters) [16834 16845])
                    ("destination_path" variable nil (reparse-symbol function_parameters) [16852 16868])
                    ("reader" variable nil (reparse-symbol function_parameters) [16894 16900])
                    ("reader_name" variable nil (reparse-symbol function_parameters) [16907 16918])
                    ("parser" variable nil (reparse-symbol function_parameters) [16952 16958])
                    ("parser_name" variable nil (reparse-symbol function_parameters) [16965 16976])
                    ("writer" variable nil (reparse-symbol function_parameters) [17016 17022])
                    ("writer_name" variable nil (reparse-symbol function_parameters) [17029 17040])
                    ("settings" variable nil (reparse-symbol function_parameters) [17073 17081])
                    ("settings_spec" variable nil (reparse-symbol function_parameters) [17088 17101])
                    ("settings_overrides" variable nil (reparse-symbol function_parameters) [17127 17145])
                    ("config_section" variable nil (reparse-symbol function_parameters) [17152 17166])
                    ("enable_exit_status" variable nil (reparse-symbol function_parameters) [17192 17210]))                  )
                nil [16807 18384])
            ("publish_parts" function
               (:documentation "
    Set up & run a `Publisher`, and return a dictionary of document parts.
    Dictionary keys are the names of parts, and values are Unicode strings;
    encoding is up to the client.  For programmatic use with string I/O.

    For encoded string input, be sure to set the 'input_encoding' setting to
    the desired encoding.  Set it to 'unicode' for unencoded Unicode string
    input.  Here's how::

        publish_parts(..., settings_overrides={'input_encoding': 'unicode'})

    Parameters: see `publish_programmatically`.
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [18403 18409])
                    ("source_path" variable nil (reparse-symbol function_parameters) [18411 18422])
                    ("source_class" variable nil (reparse-symbol function_parameters) [18429 18441])
                    ("destination_path" variable nil (reparse-symbol function_parameters) [18476 18492])
                    ("reader" variable nil (reparse-symbol function_parameters) [18517 18523])
                    ("reader_name" variable nil (reparse-symbol function_parameters) [18530 18541])
                    ("parser" variable nil (reparse-symbol function_parameters) [18574 18580])
                    ("parser_name" variable nil (reparse-symbol function_parameters) [18587 18598])
                    ("writer" variable nil (reparse-symbol function_parameters) [18637 18643])
                    ("writer_name" variable nil (reparse-symbol function_parameters) [18650 18661])
                    ("settings" variable nil (reparse-symbol function_parameters) [18693 18701])
                    ("settings_spec" variable nil (reparse-symbol function_parameters) [18708 18721])
                    ("settings_overrides" variable nil (reparse-symbol function_parameters) [18746 18764])
                    ("config_section" variable nil (reparse-symbol function_parameters) [18771 18785])
                    ("enable_exit_status" variable nil (reparse-symbol function_parameters) [18810 18828]))                  )
                nil [18385 19967])
            ("publish_doctree" function
               (:documentation "
    Set up & run a `Publisher` for programmatic use with string I/O.
    Return the document tree.

    For encoded string input, be sure to set the 'input_encoding' setting to
    the desired encoding.  Set it to 'unicode' for unencoded Unicode string
    input.  Here's one way::

        publish_doctree(..., settings_overrides={'input_encoding': 'unicode'})

    Parameters: see `publish_programmatically`.
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [19988 19994])
                    ("source_path" variable nil (reparse-symbol function_parameters) [19996 20007])
                    ("source_class" variable nil (reparse-symbol function_parameters) [20034 20046])
                    ("reader" variable nil (reparse-symbol function_parameters) [20083 20089])
                    ("reader_name" variable nil (reparse-symbol function_parameters) [20096 20107])
                    ("parser" variable nil (reparse-symbol function_parameters) [20142 20148])
                    ("parser_name" variable nil (reparse-symbol function_parameters) [20155 20166])
                    ("settings" variable nil (reparse-symbol function_parameters) [20207 20215])
                    ("settings_spec" variable nil (reparse-symbol function_parameters) [20222 20235])
                    ("settings_overrides" variable nil (reparse-symbol function_parameters) [20262 20280])
                    ("config_section" variable nil (reparse-symbol function_parameters) [20287 20301])
                    ("enable_exit_status" variable nil (reparse-symbol function_parameters) [20328 20346]))                  )
                nil [19968 21303])
            ("publish_from_doctree" function
               (:documentation "
    Set up & run a `Publisher` to render from an existing document
    tree data structure, for programmatic use with string I/O.  Return
    the encoded string output.

    Note that document.settings is overridden; if you want to use the settings
    of the original `document`, pass settings=document.settings.

    Also, new document.transformer and document.reporter objects are
    generated.

    For encoded string output, be sure to set the 'output_encoding' setting to
    the desired encoding.  Set it to 'unicode' for unencoded Unicode string
    output.  Here's one way::

        publish_from_doctree(
            ..., settings_overrides={'output_encoding': 'unicode'})

    Parameters: `document` is a `docutils.nodes.document` object, an existing
    document tree.

    Other parameters: see `publish_programmatically`.
    "
                :arguments 
                  ( ("document" variable nil (reparse-symbol function_parameters) [21329 21337])
                    ("destination_path" variable nil (reparse-symbol function_parameters) [21339 21355])
                    ("writer" variable nil (reparse-symbol function_parameters) [21387 21393])
                    ("writer_name" variable nil (reparse-symbol function_parameters) [21400 21411])
                    ("settings" variable nil (reparse-symbol function_parameters) [21450 21458])
                    ("settings_spec" variable nil (reparse-symbol function_parameters) [21465 21478])
                    ("settings_overrides" variable nil (reparse-symbol function_parameters) [21510 21528])
                    ("config_section" variable nil (reparse-symbol function_parameters) [21535 21549])
                    ("enable_exit_status" variable nil (reparse-symbol function_parameters) [21581 21599]))                  )
                nil [21304 22975])
            ("publish_cmdline_to_binary" function
               (:documentation "
    Set up & run a `Publisher` for command-line-based file I/O (input and
    output file paths taken automatically from the command line).  Return the
    encoded string output also.

    This is just like publish_cmdline, except that it uses
    io.BinaryFileOutput instead of io.FileOutput.

    Parameters: see `publish_programmatically` for the remainder.

    - `argv`: Command-line argument list to use instead of ``sys.argv[1:]``.
    - `usage`: Usage string, output if there's a problem parsing the command
      line.
    - `description`: Program description, output for the \"--help\" option
      (along with command-line option descriptions).
    "
                :arguments 
                  ( ("reader" variable nil (reparse-symbol function_parameters) [23006 23012])
                    ("reader_name" variable nil (reparse-symbol function_parameters) [23019 23030])
                    ("parser" variable nil (reparse-symbol function_parameters) [23065 23071])
                    ("parser_name" variable nil (reparse-symbol function_parameters) [23078 23089])
                    ("writer" variable nil (reparse-symbol function_parameters) [23130 23136])
                    ("writer_name" variable nil (reparse-symbol function_parameters) [23143 23154])
                    ("settings" variable nil (reparse-symbol function_parameters) [23188 23196])
                    ("settings_spec" variable nil (reparse-symbol function_parameters) [23203 23216])
                    ("settings_overrides" variable nil (reparse-symbol function_parameters) [23243 23261])
                    ("config_section" variable nil (reparse-symbol function_parameters) [23268 23282])
                    ("enable_exit_status" variable nil (reparse-symbol function_parameters) [23309 23327])
                    ("argv" variable nil (reparse-symbol function_parameters) [23334 23338])
                    ("usage" variable nil (reparse-symbol function_parameters) [23365 23370])
                    ("description" variable nil (reparse-symbol function_parameters) [23386 23397])
                    ("destination" variable nil (reparse-symbol function_parameters) [23439 23450])
                    ("destination_class" variable nil (reparse-symbol function_parameters) [23457 23474]))                  )
                nil [22976 24549])
            ("publish_programmatically" function
               (:documentation "
    Set up & run a `Publisher` for custom programmatic use.  Return the
    encoded string output and the Publisher object.

    Applications should not need to call this function directly.  If it does
    seem to be necessary to call this function directly, please write to the
    Docutils-develop mailing list
    <http://docutils.sf.net/docs/user/mailing-lists.html#docutils-develop>.

    Parameters:

    * `source_class` **required**: The class for dynamically created source
      objects.  Typically `io.FileInput` or `io.StringInput`.

    * `source`: Type depends on `source_class`:

      - If `source_class` is `io.FileInput`: Either a file-like object
        (must have 'read' and 'close' methods), or ``None``
        (`source_path` is opened).  If neither `source` nor
        `source_path` are supplied, `sys.stdin` is used.

      - If `source_class` is `io.StringInput` **required**: The input
        string, either an encoded 8-bit string (set the
        'input_encoding' setting to the correct encoding) or a Unicode
        string (set the 'input_encoding' setting to 'unicode').

    * `source_path`: Type depends on `source_class`:

      - `io.FileInput`: Path to the input file, opened if no `source`
        supplied.

      - `io.StringInput`: Optional.  Path to the file or object that produced
        `source`.  Only used for diagnostic output.

    * `destination_class` **required**: The class for dynamically created
      destination objects.  Typically `io.FileOutput` or `io.StringOutput`.

    * `destination`: Type depends on `destination_class`:

      - `io.FileOutput`: Either a file-like object (must have 'write' and
        'close' methods), or ``None`` (`destination_path` is opened).  If
        neither `destination` nor `destination_path` are supplied,
        `sys.stdout` is used.

      - `io.StringOutput`: Not used; pass ``None``.

    * `destination_path`: Type depends on `destination_class`:

      - `io.FileOutput`: Path to the output file.  Opened if no `destination`
        supplied.

      - `io.StringOutput`: Path to the file or object which will receive the
        output; optional.  Used for determining relative paths (stylesheets,
        source links, etc.).

    * `reader`: A `docutils.readers.Reader` object.

    * `reader_name`: Name or alias of the Reader class to be instantiated if
      no `reader` supplied.

    * `parser`: A `docutils.parsers.Parser` object.

    * `parser_name`: Name or alias of the Parser class to be instantiated if
      no `parser` supplied.

    * `writer`: A `docutils.writers.Writer` object.

    * `writer_name`: Name or alias of the Writer class to be instantiated if
      no `writer` supplied.

    * `settings`: A runtime settings (`docutils.frontend.Values`) object, for
      dotted-attribute access to runtime settings.  It's the end result of the
      `SettingsSpec`, config file, and option processing.  If `settings` is
      passed, it's assumed to be complete and no further setting/config/option
      processing is done.

    * `settings_spec`: A `docutils.SettingsSpec` subclass or object.  Provides
      extra application-specific settings definitions independently of
      components.  In other words, the application becomes a component, and
      its settings data is processed along with that of the other components.
      Used only if no `settings` specified.

    * `settings_overrides`: A dictionary containing application-specific
      settings defaults that override the defaults of other components.
      Used only if no `settings` specified.

    * `config_section`: A string, the name of the configuration file section
      for this application.  Overrides the ``config_section`` attribute
      defined by `settings_spec`.  Used only if no `settings` specified.

    * `enable_exit_status`: Boolean; enable exit status at end of processing?
    "
                :arguments 
                  ( ("source_class" variable nil (reparse-symbol function_parameters) [24579 24591])
                    ("source" variable nil (reparse-symbol function_parameters) [24593 24599])
                    ("source_path" variable nil (reparse-symbol function_parameters) [24601 24612])
                    ("destination_class" variable nil (reparse-symbol function_parameters) [24643 24660])
                    ("destination" variable nil (reparse-symbol function_parameters) [24662 24673])
                    ("destination_path" variable nil (reparse-symbol function_parameters) [24675 24691])
                    ("reader" variable nil (reparse-symbol function_parameters) [24722 24728])
                    ("reader_name" variable nil (reparse-symbol function_parameters) [24730 24741])
                    ("parser" variable nil (reparse-symbol function_parameters) [24772 24778])
                    ("parser_name" variable nil (reparse-symbol function_parameters) [24780 24791])
                    ("writer" variable nil (reparse-symbol function_parameters) [24822 24828])
                    ("writer_name" variable nil (reparse-symbol function_parameters) [24830 24841])
                    ("settings" variable nil (reparse-symbol function_parameters) [24872 24880])
                    ("settings_spec" variable nil (reparse-symbol function_parameters) [24882 24895])
                    ("settings_overrides" variable nil (reparse-symbol function_parameters) [24926 24944])
                    ("config_section" variable nil (reparse-symbol function_parameters) [24946 24960])
                    ("enable_exit_status" variable nil (reparse-symbol function_parameters) [24991 25009]))                  )
                nil [24550 29427]))          
      :file "core.py"
      :pointmax 29427
      :fsize 29426
      :lastmodtime '(21915 35728 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "frontend.py"
      :file "frontend.py"
      :fsize 35434
      :lastmodtime '(21915 35728 0 0)))
  :file "!drive_c!Python27!Lib!site-packages!docutils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
