;; Object v0.7.2/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "v0.7.2/"
  :tables
  (list
    (semanticdb-table "app.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
App that launches applications.

\"\"\"" code nil nil [448 488])
            ("os" include nil nil [489 498])
            ("re" include nil nil [499 508])
            ("sys" include nil nil [509 519])
            ("tank" include nil nil [521 532])
            ("tank" include nil nil [533 559])
            ("LaunchApplication" type
               (:documentation "
    Multi App to launch applications.
    "
                :superclasses ("tank.platform.Application")
                :members 
                  ( ("HELP_DOC_URL" variable nil (reparse-symbol indented_block_body) [733 837])
                    ("init_app" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [856 860]))                          )
                        (reparse-symbol indented_block_body) [843 2975])
                    ("_init_app_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3003 3007])
                            ("raw_icon" variable nil (reparse-symbol function_parameters) [3009 3017])
                            ("raw_menu_name" variable nil (reparse-symbol function_parameters) [3019 3032])
                            ("version" variable nil (reparse-symbol function_parameters) [3034 3041]))                          )
                        (reparse-symbol indented_block_body) [2980 4934])
                    ("launch_from_path_and_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4973 4977])
                            ("path" variable nil (reparse-symbol function_parameters) [4979 4983])
                            ("context" variable nil (reparse-symbol function_parameters) [4985 4992])
                            ("version" variable nil (reparse-symbol function_parameters) [4994 5001]))                          
                        :documentation "
        Extended version of launch_from_path. This method takes an additional
        context parameter which is useful if you want to seed the launch context
        with more context data than is available in the path itself. Typically
        paths may not contain a task, so this may need to be pushed through
        separately via the context.

        Entry point if you want to launch an app given a particular path.
        Note that there are no checks that the path passed is actually compatible
        with the app that is being launched. This should be handled in logic
        which is external to this app.
        ")
                        (reparse-symbol indented_block_body) [4940 5934])
                    ("launch_from_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5961 5965])
                            ("path" variable nil (reparse-symbol function_parameters) [5967 5971])
                            ("version" variable nil (reparse-symbol function_parameters) [5973 5980]))                          
                        :documentation "
        Entry point if you want to launch an app given a particular path.
        Note that there are no checks that the path passed is actually compatible
        with the app that is being launched. This should be handled in logic
        which is external to this app.
        ")
                        (reparse-symbol indented_block_body) [5940 6393])
                    ("launch_from_entity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6421 6425])
                            ("version" variable nil (reparse-symbol function_parameters) [6427 6434]))                          
                        :documentation "
        Default app command. Launches an app based on the current context and settings.
        ")
                        (reparse-symbol indented_block_body) [6398 8444])
                    ("_get_clean_version_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8479 8483])
                            ("version" variable nil (reparse-symbol function_parameters) [8485 8492]))                          
                        :documentation "
        Returns version string used for current app launch stripped of any ()'s defining 
        additional version tokens. For example, if the version setting is \"(8.4)v6\" this will 
        return \"8.4v6\"

        :param version: version of the application being launched specified by the value from 
                        'versions' settings. If no 'versions' were defined in the settings, then 
                        this will be None.
        ")
                        (reparse-symbol indented_block_body) [8449 9097])
                    ("_translate_version_tokens" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9132 9136])
                            ("raw_string" variable nil (reparse-symbol function_parameters) [9138 9148])
                            ("version" variable nil (reparse-symbol function_parameters) [9150 9157]))                          
                        :documentation "
        Returns string with version tokens replaced by their values. Replaces 
        {version} and {v0}, {v1}, etc. tokens in raw_string with their values. The {v} 
        tokens are created by using groups defined by () within the version string.
        For example, if the version setting is \"(9.0)v4(beta1)\"
            {version} = \"9.0v4\"
            {v0} = \"9.0\"
            {v1} = \"beta1\" 
        :param raw_string: raw string with un-translated tokens 
        :param version: version string to use for replacement tokens
        ")
                        (reparse-symbol indented_block_body) [9102 10194])
                    ("_get_app_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10217 10221])
                            ("version" variable nil (reparse-symbol function_parameters) [10223 10230]))                          
                        :documentation " Return the platform specific app path, performing version substitution. ")
                        (reparse-symbol indented_block_body) [10199 11134])
                    ("_launch_app" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11155 11159])
                            ("context" variable nil (reparse-symbol function_parameters) [11161 11168])
                            ("file_to_open" variable nil (reparse-symbol function_parameters) [11170 11182])
                            ("version" variable nil (reparse-symbol function_parameters) [11189 11196]))                          
                        :documentation "
        Launches an application. No environment variable change is leaked to the outside world.
        :param context: Toolkit context we will opening the app in.
        :param file_to_open: Optional file to open when the app launches. Can be None.
        :param version: Version of the app to launch. Specifying None means the default version will
                        be picked.
        ")
                        (reparse-symbol indented_block_body) [11139 12170])
                    ("_launch_app_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12200 12204])
                            ("context" variable nil (reparse-symbol function_parameters) [12206 12213])
                            ("file_to_open" variable nil (reparse-symbol function_parameters) [12215 12227])
                            ("version" variable nil (reparse-symbol function_parameters) [12234 12241]))                          
                        :documentation "
        Launches an application. This method may have side-effects in the environment variables table.
        Call the _launch_app method instead.
        :param context: Toolkit context we will opening the app in.
        :param file_to_open: Optional file to open when the app launches. Can be None.
        :param version: Version of the app to launch. Specifying None means the default version will
                        be picked.
        ")
                        (reparse-symbol indented_block_body) [12175 19357])
                    ("_clear_dll_directory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19387 19391]))                          
                        :documentation "
        Push current Dll Directory

        There are two cases that can happen related to setting a dll directory.
        
        1: Project is using different python then Desktop, in which case the desktop will set the dll 
           directory to none for the project's python interpreter. In this case, the following code is
           redundant and not needed.
        2: Desktop is using same python as Project. In which case we need to keep the desktop dll directory.
        ")
                        (reparse-symbol indented_block_body) [19362 20682])
                    ("_restore_dll_directory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20726 20730]))                          
                        :documentation "
        Pop the previously pushed DLL Directory
        ")
                        (reparse-symbol indented_block_body) [20699 21174])
                    ("_register_event_log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21203 21207])
                            ("ctx" variable nil (reparse-symbol function_parameters) [21209 21212])
                            ("command_executed" variable nil (reparse-symbol function_parameters) [21214 21230])
                            ("version" variable nil (reparse-symbol function_parameters) [21232 21239]))                          
                        :documentation "
        Writes an event log entry to the shotgun event log, informing
        about the app launch
        ")
                        (reparse-symbol indented_block_body) [21179 22075])
                    ("prepare_generic_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22107 22111])
                            ("engine_name" variable nil (reparse-symbol function_parameters) [22113 22124])
                            ("context" variable nil (reparse-symbol function_parameters) [22126 22133])
                            ("app_path" variable nil (reparse-symbol function_parameters) [22135 22143])
                            ("app_args" variable nil (reparse-symbol function_parameters) [22145 22153]))                          
                        :documentation "
        Generic engine launcher.

        This method will look for a bootstrap method in the engine's
        python/startup/bootstrap.py file if it exists.  That bootstrap will be
        called if possible.

        :param engine_name: The name of the engine being launched
        :param context: The context that the application is being launched in
        :param app_path: Path to DCC executable or launch script
        :param app_args: External app arguments

        :returns: extra arguments to pass to launch
        ")
                        (reparse-symbol indented_block_body) [22080 24886])
                    ("prepare_nuke_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24915 24919])
                            ("file_to_open" variable nil (reparse-symbol function_parameters) [24921 24933])
                            ("app_args" variable nil (reparse-symbol function_parameters) [24935 24943]))                          
                        :documentation "
        Nuke specific pre-launch environment setup.
        ")
                        (reparse-symbol indented_block_body) [24891 25616])
                    ("prepare_hiero_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25646 25650]))                          
                        :documentation "
        Hiero specific pre-launch environment setup.
        ")
                        (reparse-symbol indented_block_body) [25621 25908])
                    ("prepare_maya_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25937 25941])
                            ("app_path" variable nil (reparse-symbol function_parameters) [25943 25951]))                          
                        :documentation "
        Maya specific pre-launch environment setup.
        ")
                        (reparse-symbol indented_block_body) [25913 27542])
                    ("prepare_softimage_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27577 27581]))                          
                        :documentation "
        Softimage specific pre-launch environment setup.
        ")
                        (reparse-symbol indented_block_body) [27548 28821])
                    ("prepare_motionbuilder_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28860 28864])
                            ("app_args" variable nil (reparse-symbol function_parameters) [28866 28874]))                          
                        :documentation "
        Maya specific pre-launch environment setup.
        ")
                        (reparse-symbol indented_block_body) [28827 29216])
                    ("prepare_3dsmax_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29247 29251])
                            ("app_args" variable nil (reparse-symbol function_parameters) [29253 29261]))                          
                        :documentation "
        3DSMax specific pre-launch environment setup.

        Make sure launch args include a maxscript to load the python engine:
        3dsmax.exe somefile.max -U MAXScript somescript.ms
        ")
                        (reparse-symbol indented_block_body) [29221 29905])
                    ("prepare_3dsmaxplus_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29941 29945])
                            ("context" variable nil (reparse-symbol function_parameters) [29947 29954])
                            ("app_args" variable nil (reparse-symbol function_parameters) [29956 29964]))                          
                        :documentation "
        3DSMax Plus specific pre-launch environment setup.

        Make sure launch args include a bootstrap to load the python engine:
        3dsmax.exe somefile.max -U PythonHost somescript.py
        ")
                        (reparse-symbol indented_block_body) [29911 30710])
                    ("prepare_houdini_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30742 30746])
                            ("context" variable nil (reparse-symbol function_parameters) [30748 30755]))                          
                        :documentation "
        Houdini specific pre-launch environment setup.
        ")
                        (reparse-symbol indented_block_body) [30715 31460])
                    ("prepare_flame_flare_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31496 31500])
                            ("engine_name" variable nil (reparse-symbol function_parameters) [31502 31513])
                            ("context" variable nil (reparse-symbol function_parameters) [31515 31522])
                            ("app_path" variable nil (reparse-symbol function_parameters) [31524 31532])
                            ("app_args" variable nil (reparse-symbol function_parameters) [31534 31542]))                          
                        :documentation "
        Flame specific pre-launch environment setup.

        :param engine_name: The name of the engine being launched (tk-flame or tk-flare)
        :param context: The context that the application is being launched in
        :param app_path: Path to DCC executable or launch script
        :param app_args: External app arguments
        
        :returns: extra arguments to pass to launch
        ")
                        (reparse-symbol indented_block_body) [31465 33508])
                    ("prepare_mari_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33537 33541])
                            ("engine_name" variable nil (reparse-symbol function_parameters) [33543 33554])
                            ("context" variable nil (reparse-symbol function_parameters) [33556 33563]))                          
                        :documentation "
        Mari specific pre-launch environment setup.

        :param engine_name: The name of the Mari engine being launched
        :param context:     The context that the application is being launched in
        ")
                        (reparse-symbol indented_block_body) [33513 34314])
                    ("prepare_photoshop_launch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34356 34360])
                            ("context" variable nil (reparse-symbol function_parameters) [34362 34369]))                          
                        :documentation "
        Photoshop specific pre-launch environment setup.
        ")
                        (reparse-symbol indented_block_body) [34327 37412])
                    ("_get_app_specific_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37445 37449])
                            ("app_dir" variable nil (reparse-symbol function_parameters) [37451 37458]))                          
                        :documentation "
        Get the path for application specific files for a given application.
        ")
                        (reparse-symbol indented_block_body) [37418 37636]))                  
                :type "class")
                nil [562 37636])
            ("TankBootstrapNotFoundError" type
               (:documentation "
    Exception raised when an engine-specific bootstrap routine is not
    found.
    "
                :superclasses ("TankError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [37889 37893]))                  
                :type "class")
                nil [37743 37894]))          
      :file "app.py"
      :pointmax 37894
      :fsize 37893
      :lastmodtime '(22220 36379 0 0)
      :unmatched-syntax '((INDENT_BLOCK 33435 . 33463) (NEWLINE 33389 . 33390) (COLON 33388 . 33389) (FINALLY 33381 . 33388) (INDENT_BLOCK 24493 . 24849) (NEWLINE 24447 . 24448) (COLON 24446 . 24447) (FINALLY 24439 . 24446))))
  :file "!drive_s!SGTK_Development!ShotgunDevelopment!install!apps!app_store!tk-multi-launchapp!v0.7.2!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
