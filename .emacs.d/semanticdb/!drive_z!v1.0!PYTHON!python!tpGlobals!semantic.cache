;; Object tpGlobals/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "tpGlobals/"
  :tables
  (list
    (semanticdb-table "path.py"
      :major-mode 'python-mode
      :tags 
        '( ("os" include nil nil [1 10])
            ("tpGlobals.utils.version" include nil nil [12 53])
            ("tpGlobals.project" include nil nil [54 89])
            ("reload" code nil nil [90 105])
            ("tpGlobals.env" include nil nil [106 141])
            ("mkdirs" function
               (:documentation "
	Info:	Make Dirs
	Args:
			1. 	mode ( Options : work, RELEASE )
			2. 	list of elements
			3. 	publish dir name
	"
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [155 159])
                    ("folderList" variable nil (reparse-symbol function_parameters) [161 171])
                    ("publishDir" variable nil (reparse-symbol function_parameters) [173 183]))                  )
                nil [143 2009])
            ("mkSymlink" function
               (:documentation "
	Info:	Make Symlink
	Args:
			1. 	source
			2. 	target
	"
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [2025 2031])
                    ("target" variable nil (reparse-symbol function_parameters) [2033 2039]))                  )
                nil [2010 2270])
            ("sortPublish" function
               (:documentation "
	Info:		Sort Publish Information
	Args:
				1. 	versionList ( from database )
	Structure:
				element = {}
					elementType = {}
						version = {}
							info = { publish, mov, scene }
	"
                :arguments 
                  ( ("versionList" variable nil (reparse-symbol function_parameters) [2413 2424]))                  )
                nil [2396 4335])
            ("filterPublish" function (:arguments 
              ( ("elementDict" variable nil (reparse-symbol function_parameters) [4355 4366])
                ("forceAT" variable nil (reparse-symbol function_parameters) [4368 4375]))              ) nil [4336 5572])
            ("getPublishInfo" function (:documentation "
	Info: 		Get Review Information
	Structure:	
				tasks = {}
					elements = []
						element = { element , versions }
							versions = []
								version = { version, - task defined - }
	") nil [5584 7274])
            ("getPublishFiles" function (:arguments 
              ( ("filepath" variable nil (reparse-symbol function_parameters) [7297 7305])
                ("publishType" variable nil (reparse-symbol function_parameters) [7307 7318]))              ) nil [7276 7723])
            ("getPublishOverview" function nil nil [7724 8843])
            ("filterPublishOverview" function (:arguments 
              ( ("filterType" variable nil (reparse-symbol function_parameters) [8871 8881])
                ("publishOverview" variable nil (reparse-symbol function_parameters) [8883 8898]))              ) nil [8844 9734])
            ("constructRootPath" function
               (:documentation "
	Info: 		Construct Root Path
	Args:		
				1. projectID		 ( int )
				2. entity1		     ( int/str )
				3. entity2			 ( int )	
	"
                :arguments 
                  ( ("projectID" variable nil (reparse-symbol function_parameters) [9885 9894])
                    ("entity1" variable nil (reparse-symbol function_parameters) [9896 9903])
                    ("entity2" variable nil (reparse-symbol function_parameters) [9905 9912]))                  )
                nil [9862 11091])
            ("constructWorkPath" function nil nil [11092 11125])
            ("constructFilename" function
               (:documentation "
	Info: 		Construct Filename
	Args:		
				1. file extention
				2. path
				3. version mode ( Options : new, find )	
	"
                :arguments 
                  ( ("extention" variable nil (reparse-symbol function_parameters) [11149 11158])
                    ("path" variable nil (reparse-symbol function_parameters) [11160 11164])
                    ("versionMode" variable nil (reparse-symbol function_parameters) [11166 11177])
                    ("name" variable nil (reparse-symbol function_parameters) [11179 11183])
                    ("suffix" variable nil (reparse-symbol function_parameters) [11190 11196]))                  )
                nil [11126 12068])
            ("getEntityName" function (:documentation "
	Info: 		Get Entity Name
	") nil [12070 12438])
            ("getDepartmentName" function (:documentation "
	Info: 		Get Department Name
	") nil [12439 12605])
            ("getUserName" function (:documentation "
	Info: 		Get User Name
	") nil [12606 12797])
            ("getUsernameShort" function (:documentation "
	Info: 		Get User Name Short ( 3 Capital Letters )
	") nil [12798 12938])
            ("getExtentions" function (:documentation "
	Info: 		Available Extentions
	") nil [12939 13167])
            ("getSavePath" function
               (:documentation "
	Info: 		Get Save Path
	Args:
			1. all users ( Options: True, False )
	"
                :arguments 
                  ( ("allUsers" variable nil (reparse-symbol function_parameters) [13310 13318]))                  )
                nil [13293 14073])
            ("getSavedFiles" function
               (:documentation "
	Info: 		Get Save Files
	Args:
			1. all users ( Options: True, False )
	"
                :arguments 
                  ( ("allUsers" variable nil (reparse-symbol function_parameters) [14093 14101]))                  )
                nil [14074 14654])
            ("getTPRPath" function nil nil [14780 14975])
            ("listFilesByDate" function (:arguments 
              ( ("filesList" variable nil (reparse-symbol function_parameters) [15122 15131]))              ) nil [15101 15229]))          
      :file "path.py"
      :pointmax 15230
      :fsize 15229
      :lastmodtime '(21757 35543 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "platform.py"
      :major-mode 'python-mode
      :tags 
        '( ("sys" include nil nil [1 11])
            ("os" include nil nil [12 21]))          
      :file "platform.py"
      :pointmax 23
      :fsize 22
      :lastmodtime '(21757 35543 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "shotgun.py"
      :major-mode 'python-mode
      :tags 
        '( ("urllib2" include nil nil [1 15])
            ("commands" include nil nil [16 31])
            ("os" include nil nil [32 41])
            ("tpGlobals.db" include nil nil [43 74])
            ("reload" code nil nil [75 91])
            ("tpGlobals.path" include nil nil [92 121])
            ("tpGlobals.project" include nil nil [122 157])
            ("pathPrefix" variable nil nil [159 186])
            ("initShotgun" function nil nil [188 584])
            ("Create" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [622 645]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [613 617]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [600 646])
                    ("version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [661 665])
                            ("infoList" variable nil (reparse-symbol function_parameters) [668 676]))                          )
                        (reparse-symbol indented_block_body) [648 2088])
                    ("timelog" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2103 2107])
                            ("timelogs" variable nil (reparse-symbol function_parameters) [2109 2117]))                          )
                        (reparse-symbol indented_block_body) [2090 3175]))                  
                :type "class")
                nil [585 3175])
            ("Url" type
               (:members 
                  ( ("openInBrowser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3207 3211]))                          )
                        (reparse-symbol indented_block_body) [3188 3436]))                  
                :type "class")
                nil [3176 3436])
            ("Get" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3475 3498]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3465 3469]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3451 3499])
                    ("entityDict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3517 3521]))                          )
                        (reparse-symbol indented_block_body) [3501 4265])
                    ("user" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4277 4281])
                            ("userName" variable nil (reparse-symbol function_parameters) [4283 4291]))                          )
                        (reparse-symbol indented_block_body) [4267 4436])
                    ("shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4448 4452])
                            ("ID" variable nil (reparse-symbol function_parameters) [4454 4456]))                          )
                        (reparse-symbol indented_block_body) [4438 4628])
                    ("asset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4641 4645])
                            ("ID" variable nil (reparse-symbol function_parameters) [4647 4649]))                          )
                        (reparse-symbol indented_block_body) [4630 4809]))                  
                :type "class")
                nil [3439 4809])
            ("Events" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4849 4872]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4839 4843]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4825 4873])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4889 4893])
                            ("num" variable nil (reparse-symbol function_parameters) [4896 4899]))                          )
                        (reparse-symbol indented_block_body) [4876 8192]))                  
                :type "class")
                nil [4810 8192])
            ("convertShotgun" function
               (:documentation "
	Info: 	Converts a Database column name into its Shotgun equivalent
	Args:	1. 	field name
	"
                :arguments 
                  ( ("fieldName" variable nil (reparse-symbol function_parameters) [8462 8471]))                  )
                nil [8442 10090])
            ("convertDatabase" function
               (:documentation "
	Info: 	Converts a Shotgun EventLog Data into its Database equivalent
	Args:	
			1. 	meta		( shotgunEventLog[ \"meta\" ] )
			2. 	mode 		( Options: create, update )
	"
                :arguments 
                  ( ("meta" variable nil (reparse-symbol function_parameters) [10115 10119])
                    ("mode" variable nil (reparse-symbol function_parameters) [10121 10125]))                  )
                nil [10094 15787]))          
      :file "shotgun.py"
      :pointmax 15787
      :fsize 15786
      :lastmodtime '(21757 35543 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "db.py"
      :major-mode 'python-mode
      :tags 
        '( ("sqlalchemy" include nil nil [1 25])
            ("sqlalchemy.orm" include nil nil [26 73])
            ("sqlalchemy.dialects" include nil nil [74 116])
            ("initDatabase" function (:documentation "
	Info:	Initialize Database Object
	") nil [118 275])
            ("createEntity" function
               (:documentation "
	Info:	Create Entity 
	Args:	
			1. 	table name 
			2. 	info ( { values : [[ column name, value ]] } )
	"
                :arguments 
                  ( ("tableName" variable nil (reparse-symbol function_parameters) [454 463])
                    ("info" variable nil (reparse-symbol function_parameters) [465 469]))                  )
                nil [436 950])
            ("updateEntity" function
               (:documentation "
	Info:	Update Entity 
	Args:	
			1. 	table name 
			2. 	info ( { values : [[ column name, value ]], ID : int } )
	"
                :arguments 
                  ( ("tableName" variable nil (reparse-symbol function_parameters) [970 979])
                    ("info" variable nil (reparse-symbol function_parameters) [981 985]))                  )
                nil [952 1848])
            ("setEventID" function
               (:documentation "
	Info:	Set Shotgun Latest Processed EventLog ID
	Args:	1. 	ID 		( int )
	"
                :arguments 
                  ( ("ID" variable nil (reparse-symbol function_parameters) [2026 2028]))                  )
                nil [2010 2290])
            ("getEventID" function (:documentation "
	Info:	Returns Shotgun Latest Processed EventLog ID
	") nil [2291 2642])
            ("createTimelog" function
               (:documentation "
	Info:	createTimelog
	Args:	1. 	info 		( dict )
	"
                :arguments 
                  ( ("info" variable nil (reparse-symbol function_parameters) [2822 2826]))                  )
                nil [2803 3346])
            ("updateTimelog" function
               (:documentation "
	Info:	Find Timelogs
	Args:	1. 	info 		( dict )
	"
                :arguments 
                  ( ("info" variable nil (reparse-symbol function_parameters) [3366 3370]))                  )
                nil [3347 3927])
            ("findTimelog" function
               (:documentation "
	Info:	Find Timelogs
	Args:	1. 	info 		( dict )
	"
                :arguments 
                  ( ("info" variable nil (reparse-symbol function_parameters) [3945 3949]))                  )
                nil [3928 4466])
            ("findColumn" function
               (:documentation "
	Info:	Returns all Column names of a Table
	Args:	
			1. 	database object 		( initDatabase() )
			2.  table name
	"
                :arguments 
                  ( ("db" variable nil (reparse-symbol function_parameters) [4643 4645])
                    ("tableName" variable nil (reparse-symbol function_parameters) [4647 4656]))                  )
                nil [4627 5156])
            ("addColumn" function
               (:documentation "
	Info:	Add Column to a Table
	Args:	
			1. 	database object 		( initDatabase() )
			2.  table name 				
			3.  column name 			
			4.  entry type 				( Example: int4, varchar, bool, float4 )
	"
                :arguments 
                  ( ("db" variable nil (reparse-symbol function_parameters) [5173 5175])
                    ("tableName" variable nil (reparse-symbol function_parameters) [5177 5186])
                    ("newColumnName" variable nil (reparse-symbol function_parameters) [5188 5201])
                    ("t" variable nil (reparse-symbol function_parameters) [5203 5204]))                  )
                nil [5158 5593]))          
      :file "db.py"
      :pointmax 5757
      :fsize 5756
      :lastmodtime '(21757 35543 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "file.py"
      :major-mode 'python-mode
      :tags 
        '( ("os" include nil nil [1 10])
            ("tpGlobals.env" include nil nil [11 46])
            ("tpGlobals.path" include nil nil [47 76])
            ("save" function
               (:documentation "
	Info:	Global Save Function
	"
                :arguments 
                  ( ("ID" variable nil (reparse-symbol function_parameters) [88 90]))                  )
                nil [78 472])
            ("load" function
               (:documentation "
	Info:	Global Load Function
	"
                :arguments 
                  ( ("filepath" variable nil (reparse-symbol function_parameters) [483 491]))                  )
                nil [473 668]))          
      :file "file.py"
      :pointmax 668
      :fsize 667
      :lastmodtime '(21757 35543 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "info.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Used to store Static Information
\"\"\"" code nil nil [1 41])
            ("__unlockPassword__" variable nil nil [43 72])
            ("__uiPath__" variable nil nil [73 156])
            ("__iconPath__" variable nil nil [157 207])
            ("__styleSheet__" variable nil nil [208 6263])
            ("\"\"\"
QToolTip
{
     border: 1px solid black;
     background-color: #ffa02f;
     padding: 1px;
     border-radius: 3px;
     opacity: 100;
}


QWidget
{
    color: #b1b1b1;
    background-color: #323232;
}



QWidget:item:hover
{
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 1 #ca0619);
    color: #000000;
}

QWidget:item:selected
{
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 1 #d7801a);
}

QMenuBar::item
{
    background: transparent;
}

QMenuBar::item:selected
{
    background: transparent;
    border: 1px solid #ffaa00;
}

QMenuBar::item:pressed
{
    background: #444;
    border: 1px solid #000;
    background-color: QLinearGradient(
        x1:0, y1:0,
        x2:0, y2:1,
        stop:1 #212121,
        stop:0.4 #343434/*,
        stop:0.2 #343434,
        stop:0.1 #ffaa00*/
    );
    margin-bottom:-1px;
    padding-bottom:1px;
}

QMenu
{
    border: 1px solid #000;
}

QMenu::item
{
    padding: 2px 20px 2px 20px;
}

QMenu::item:selected
{
    color: #000000;
}

QWidget:disabled
{
    color: #404040;
    background-color: #323232;
}

QAbstractItemView
{
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #4d4d4d, stop: 0.1 #646464, stop: 1 #5d5d5d);
}

QWidget:focus
{
    /*border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 1 #d7801a);*/
}

QLineEdit
{
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #4d4d4d, stop: 0 #646464, stop: 1 #5d5d5d);
    padding: 1px;
    border-style: solid;
    border: 1px solid #1e1e1e;
    border-radius: 5;
}

QPushButton
{
    color: #b1b1b1;
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
    border-width: 1px;
    border-color: #1e1e1e;
    border-style: solid;
    border-radius: 3;
    padding: 3px;
    font-size: 12px;
    padding-left: 5px;
    padding-right: 5px;
}

QPushButton:pressed
{
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #2d2d2d, stop: 0.1 #2b2b2b, stop: 0.5 #292929, stop: 0.9 #282828, stop: 1 #252525);
}

QComboBox
{
    selection-background-color: #ffaa00;
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #565656, stop: 0.1 #525252, stop: 0.5 #4e4e4e, stop: 0.9 #4a4a4a, stop: 1 #464646);
    border-style: solid;
    border: 1px solid #1e1e1e;
    border-radius: 3;
}

QComboBox:hover,QPushButton:hover
{
    border: 1px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 1 #d7801a);
}


QComboBox:on
{
    padding-top: 3px;
    padding-left: 4px;
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #2d2d2d, stop: 0.1 #2b2b2b, stop: 0.5 #292929, stop: 0.9 #282828, stop: 1 #252525);
    selection-background-color: #ffaa00;
}

QComboBox QAbstractItemView
{
    border: 2px solid darkgray;
    selection-background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 1 #d7801a);
}

QComboBox::drop-down
{
     subcontrol-origin: padding;
     subcontrol-position: top right;
     width: 15px;

     border-left-width: 0px;
     border-left-color: darkgray;
     border-left-style: solid; /* just a single line */
     border-top-right-radius: 3px; /* same radius as the QComboBox */
     border-bottom-right-radius: 3px;
 }

QComboBox::down-arrow
{
     image: url(:/down_arrow.png);
}

QGroupBox:focus
{
border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 1 #d7801a);
}

QTextEdit:focus
{
    border: 2px solid QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 1 #d7801a);
}

QScrollBar:horizontal {
     border: 1px solid #222222;
     background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0.0 #121212, stop: 0.2 #282828, stop: 1 #484848);
     height: 7px;
     margin: 0px 16px 0 16px;
}

QScrollBar::handle:horizontal
{
      background: QLinearGradient( x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #ffa02f, stop: 0.5 #d7801a, stop: 1 #ffa02f);
      min-height: 20px;
      border-radius: 2px;
}

QScrollBar::add-line:horizontal {
      border: 1px solid #1b1b19;
      border-radius: 2px;
      background: QLinearGradient( x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #ffa02f, stop: 1 #d7801a);
      width: 14px;
      subcontrol-position: right;
      subcontrol-origin: margin;
}

QScrollBar::sub-line:horizontal {
      border: 1px solid #1b1b19;
      border-radius: 2px;
      background: QLinearGradient( x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 #ffa02f, stop: 1 #d7801a);
      width: 14px;
     subcontrol-position: left;
     subcontrol-origin: margin;
}

QScrollBar::right-arrow:horizontal, QScrollBar::left-arrow:horizontal
{
      border: 1px solid black;
      width: 1px;
      height: 1px;
      background: white;
}

QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
{
      background: none;
}

QScrollBar:vertical
{
      background: QLinearGradient( x1: 0, y1: 0, x2: 1, y2: 0, stop: 0.0 #121212, stop: 0.2 #282828, stop: 1 #484848);
      width: 7px;
      margin: 16px 0 16px 0;
      border: 1px solid #222222;
}

QScrollBar::handle:vertical
{
      background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 0.5 #d7801a, stop: 1 #ffa02f);
      min-height: 20px;
      border-radius: 2px;
}

QScrollBar::add-line:vertical
{
      border: 1px solid #1b1b19;
      border-radius: 2px;
      background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffa02f, stop: 1 #d7801a);
      height: 14px;
      subcontrol-position: bottom;
      subcontrol-origin: margin;
}

QScrollBar::sub-line:vertical
{
      border: 1px solid #1b1b19;
      border-radius: 2px;
      background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #d7801a, stop: 1 #ffa02f);
      height: 14px;
      subcontrol-position: top;
      subcontrol-origin: margin;
}

QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
{
      border: 1px solid black;
      width: 1px;
      height: 1px;
      background: white;
}


QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
{
      background: none;
}

QTextEdit
{
    background-color: #242424;
}

QPlainTextEdit
{
    background-color: #242424;
}

QHeaderView::section
{
    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #616161, stop: 0.5 #505050, stop: 0.6 #434343, stop:1 #656565);
    color: white;
    padding-left: 4px;
    border: 1px solid #6c6c6c;
}

QCheckBox:disabled
{
color: #414141;
}

QDockWidget::title
{
    text-align: center;
    spacing: 3px; /* spacing between items in the tool bar */
    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #323232, stop: 0.5 #242424, stop:1 #323232);
}

QDockWidget::close-button, QDockWidget::float-button
{
    text-align: center;
    spacing: 1px; /* spacing between items in the tool bar */
    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #323232, stop: 0.5 #242424, stop:1 #323232);
}

QDockWidget::close-button:hover, QDockWidget::float-button:hover
{
    background: #242424;
}

QDockWidget::close-button:pressed, QDockWidget::float-button:pressed
{
    padding: 1px -1px -1px 1px;
}

QMainWindow::separator
{
    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #161616, stop: 0.5 #151515, stop: 0.6 #212121, stop:1 #343434);
    color: white;
    padding-left: 4px;
    border: 1px solid #4c4c4c;
    spacing: 3px; /* spacing between items in the tool bar */
}

QMainWindow::separator:hover
{

    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #d7801a, stop:0.5 #b56c17 stop:1 #ffa02f);
    color: white;
    padding-left: 4px;
    border: 1px solid #6c6c6c;
    spacing: 3px; /* spacing between items in the tool bar */
}

QToolBar::handle
{
     spacing: 3px; /* spacing between items in the tool bar */
     background: url(:/images/handle.png);
}

QMenu::separator
{
    height: 2px;
    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:0 #161616, stop: 0.5 #151515, stop: 0.6 #212121, stop:1 #343434);
    color: white;
    padding-left: 4px;
    margin-left: 10px;
    margin-right: 5px;
}

QProgressBar
{
    border: 2px solid grey;
    border-radius: 5px;
    text-align: center;
}

QProgressBar::chunk
{
    background-color: #d7801a;
    width: 2.15px;
    margin: 0.5px;
}

QTabBar::tab {
    color: #b1b1b1;
    border: 1px solid #444;
    border-bottom-style: none;
    background-color: #323232;
    padding-left: 10px;
    padding-right: 10px;
    padding-top: 3px;
    padding-bottom: 2px;
    margin-right: -1px;
}

QTabWidget::pane {
    border: 1px solid #444;
    top: 1px;
}

QTabBar::tab:last
{
    margin-right: 0; /* the last selected tab has nothing to overlap with on the right */
    border-top-right-radius: 3px;
}

QTabBar::tab:first:!selected
{
 margin-left: 0px; /* the last selected tab has nothing to overlap with on the right */


    border-top-left-radius: 3px;
}

QTabBar::tab:!selected
{
    color: #b1b1b1;
    border-bottom-style: solid;
    margin-top: 3px;
    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:1 #212121, stop:.4 #343434);
}

QTabBar::tab:selected
{
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
    margin-bottom: 0px;
}

QTabBar::tab:!selected:hover
{
    /*border-top: 2px solid #ffaa00;
    padding-bottom: 3px;*/
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
    background-color: QLinearGradient(x1:0, y1:0, x2:0, y2:1, stop:1 #212121, stop:0.4 #343434, stop:0.2 #343434, stop:0.1 #ffaa00);
}

QRadioButton::indicator:checked, QRadioButton::indicator:unchecked{
    color: #b1b1b1;
    background-color: #323232;
    border: 1px solid #b1b1b1;
    border-radius: 6px;
}

QRadioButton::indicator:checked
{
    background-color: qradialgradient(
        cx: 0.5, cy: 0.5,
        fx: 0.5, fy: 0.5,
        radius: 1.0,
        stop: 0.25 #ffaa00,
        stop: 0.3 #323232
    );
}

QCheckBox::indicator{
    color: #b1b1b1;
    background-color: #323232;
    border: 1px solid #b1b1b1;
    width: 9px;
    height: 9px;
}

QRadioButton::indicator
{
    border-radius: 6px;
}

QRadioButton::indicator:hover, QCheckBox::indicator:hover
{
    border: 1px solid #ffaa00;
}

QCheckBox::indicator:checked
{
    image:url(:/images/checkbox.png);
}

QCheckBox::indicator:disabled, QRadioButton::indicator:disabled
{
    border: 1px solid #444;
}
\"\"\"" code nil nil [6274 16760]))          
      :file "info.py"
      :pointmax 16786
      :fsize 16785
      :lastmodtime '(21757 35543 0 0)
      :unmatched-syntax nil))
  :file "!drive_z!v1.0!PYTHON!python!tpGlobals!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
