;; Object utils/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "utils/"
  :tables
  (list
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Miscellaneous utilities for the documentation utilities.
\"\"\"" code nil nil [179 243])
            ("__docformat__" variable nil nil [245 279])
            ("sys" include nil nil [281 291])
            ("os" include nil nil [292 301])
            ("os.path" include nil nil [302 316])
            ("re" include nil nil [317 326])
            ("warnings" include nil nil [327 342])
            ("unicodedata" include nil nil [343 361])
            ("docutils" include nil nil [362 410])
            ("docutils" include nil nil [411 437])
            ("docutils.io" include nil nil [438 456])
            ("docutils.utils.error_reporting" include nil nil [457 523])
            ("SystemMessage" type
               (:superclasses ("ApplicationError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Exception" code nil (reparse-symbol indented_block_body) [621 670])
                            ("self" variable nil (reparse-symbol indented_block_body) [679 697]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [583 587])
                            ("system_message" variable nil (reparse-symbol function_parameters) [589 603])
                            ("level" variable nil (reparse-symbol function_parameters) [605 610]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [570 698]))                  
                :type "class")
                nil [526 698])
            ("SystemMessagePropagation" type
               (:superclasses ("ApplicationError")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [700 755])
            ("Reporter" type
               (:documentation "
    Info/warning/error reporter and ``system_message`` element generator.

    Five levels of system messages are defined, along with corresponding
    methods: `debug()`, `info()`, `warning()`, `error()`, and `severe()`.

    There is typically one Reporter object per process.  A Reporter object is
    instantiated with thresholds for reporting (generating warnings) and
    halting processing (raising exceptions), a switch to turn debug output on
    or off, and an I/O stream for warnings.  These are stored as instance
    attributes.

    When a system message is generated, its level is compared to the stored
    thresholds, and a warning or error is generated as appropriate.  Debug
    messages are produced if the stored debug switch is on, independently of
    other thresholds.  Message output is sent to the stored warning stream if
    not set to ''.

    The Reporter class also employs a modified form of the \"Observer\" pattern
    [GoF95]_ to track system messages generated.  The `attach_observer` method
    should be called before parsing, with a bound method or function which
    accepts system messages.  The observer can be removed with
    `detach_observer`, and another added in its place.

    .. [GoF95] Gamma, Helm, Johnson, Vlissides. *Design Patterns: Elements of
       Reusable Object-Oriented Software*. Addison-Wesley, Reading, MA, USA,
       1995.
    "
                :members 
                  ( ("levels" variable nil (reparse-symbol indented_block_body) [2183 2233])
                    ("\"\"\"List of names for system message levels, indexed by level.\"\"\"" code nil (reparse-symbol indented_block_body) [2238 2302])
                    ("" code nil (reparse-symbol indented_block_body) [2346 2444])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        :Parameters:
            - `source`: The path to or description of the source data.
            - `report_level`: The level at or above which warning output will
              be sent to `stream`.
            - `halt_level`: The level at or above which `SystemMessage`
              exceptions will be raised, halting execution.
            - `debug`: Show debug (level=0) system messages?
            - `stream`: Where warning output is sent.  Can be file-like (has a
              ``.write`` method), a string (file name, opened for writing),
              '' (empty string) or `False` (for discarding all stream messages)
              or `None` (implies `sys.stderr`; default).
            - `encoding`: The output encoding.
            - `error_handler`: The error handler for stderr output encoding.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2604 3433])
                            ("self" variable nil (reparse-symbol indented_block_body) [3443 3463])
                            ("\"\"\"The path to or description of the source data.\"\"\"" code nil (reparse-symbol indented_block_body) [3472 3524])
                            ("self" variable nil (reparse-symbol indented_block_body) [3534 3568])
                            ("\"\"\"The character encoding error handler.\"\"\"" code nil (reparse-symbol indented_block_body) [3577 3620])
                            ("self" variable nil (reparse-symbol indented_block_body) [3630 3653])
                            ("\"\"\"Show debug (level=0) system messages?\"\"\"" code nil (reparse-symbol indented_block_body) [3662 3705])
                            ("self" variable nil (reparse-symbol indented_block_body) [3715 3747])
                            ("\"\"\"The level at or above which warning output will be sent
        to `self.stream`.\"\"\"" code nil (reparse-symbol indented_block_body) [3756 3843])
                            ("self" variable nil (reparse-symbol indented_block_body) [3853 3881])
                            ("\"\"\"The level at or above which `SystemMessage` exceptions
        will be raised, halting execution.\"\"\"" code nil (reparse-symbol indented_block_body) [3890 3993])
                            ("if" code nil (reparse-symbol indented_block_body) [4003 4109])
                            ("self" variable nil (reparse-symbol indented_block_body) [4118 4138])
                            ("\"\"\"Where warning output is sent.\"\"\"" code nil (reparse-symbol indented_block_body) [4147 4182])
                            ("self" code nil (reparse-symbol indented_block_body) [4192 4256])
                            ("\"\"\"The output character encoding.\"\"\"" code nil (reparse-symbol indented_block_body) [4265 4301])
                            ("self" variable nil (reparse-symbol indented_block_body) [4311 4330])
                            ("\"\"\"List of bound methods or functions to call with each system_message
        created.\"\"\"" code nil (reparse-symbol indented_block_body) [4339 4429])
                            ("self" code nil (reparse-symbol indented_block_body) [4439 4458])
                            ("\"\"\"The highest level system message generated so far.\"\"\"" code nil (reparse-symbol indented_block_body) [4467 4523]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2463 2467])
                            ("source" variable nil (reparse-symbol function_parameters) [2469 2475])
                            ("report_level" variable nil (reparse-symbol function_parameters) [2477 2489])
                            ("halt_level" variable nil (reparse-symbol function_parameters) [2491 2501])
                            ("stream" variable nil (reparse-symbol function_parameters) [2503 2509])
                            ("debug" variable nil (reparse-symbol function_parameters) [2533 2538])
                            ("encoding" variable nil (reparse-symbol function_parameters) [2546 2554])
                            ("error_handler" variable nil (reparse-symbol function_parameters) [2561 2574]))                          
                        :documentation "
        :Parameters:
            - `source`: The path to or description of the source data.
            - `report_level`: The level at or above which warning output will
              be sent to `stream`.
            - `halt_level`: The level at or above which `SystemMessage`
              exceptions will be raised, halting execution.
            - `debug`: Show debug (level=0) system messages?
            - `stream`: Where warning output is sent.  Can be file-like (has a
              ``.write`` method), a string (file name, opened for writing),
              '' (empty string) or `False` (for discarding all stream messages)
              or `None` (implies `sys.stderr`; default).
            - `encoding`: The output encoding.
            - `error_handler`: The error handler for stderr output encoding.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2450 4524])
                    ("set_conditions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4548 4552])
                            ("category" variable nil (reparse-symbol function_parameters) [4554 4562])
                            ("report_level" variable nil (reparse-symbol function_parameters) [4564 4576])
                            ("halt_level" variable nil (reparse-symbol function_parameters) [4578 4588])
                            ("stream" variable nil (reparse-symbol function_parameters) [4613 4619])
                            ("debug" variable nil (reparse-symbol function_parameters) [4626 4631]))                          )
                        (reparse-symbol indented_block_body) [4529 5114])
                    ("attach_observer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5139 5143])
                            ("observer" variable nil (reparse-symbol function_parameters) [5145 5153]))                          
                        :documentation "
        The `observer` parameter is a function or bound method which takes one
        argument, a `nodes.system_message` instance.
        ")
                        (reparse-symbol indented_block_body) [5119 5352])
                    ("detach_observer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5377 5381])
                            ("observer" variable nil (reparse-symbol function_parameters) [5383 5391]))                          )
                        (reparse-symbol indented_block_body) [5357 5434])
                    ("notify_observers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5460 5464])
                            ("message" variable nil (reparse-symbol function_parameters) [5466 5473]))                          )
                        (reparse-symbol indented_block_body) [5439 5546])
                    ("system_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5570 5574])
                            ("level" variable nil (reparse-symbol function_parameters) [5576 5581])
                            ("message" variable nil (reparse-symbol function_parameters) [5583 5590])
                            ("children" variable nil (reparse-symbol function_parameters) [5592 5601])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5603 5611]))                          
                        :documentation "
        Return a system_message object.

        Raise an exception or generate a warning if appropriate.
        ")
                        (reparse-symbol indented_block_body) [5551 7712])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7727 7731])
                            ("args" variable nil (reparse-symbol function_parameters) [7733 7738])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7740 7748]))                          
                        :documentation "
        Level-0, \"DEBUG\": an internal reporting issue. Typically, there is no
        effect on the processing. Level-0 system messages are handled
        separately from the others.
        ")
                        (reparse-symbol indented_block_body) [7717 8061])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8075 8079])
                            ("args" variable nil (reparse-symbol function_parameters) [8081 8086])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8088 8096]))                          
                        :documentation "
        Level-1, \"INFO\": a minor issue that can be ignored. Typically there is
        no effect on processing, and level-1 system messages are not reported.
        ")
                        (reparse-symbol indented_block_body) [8066 8350])
                    ("warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8367 8371])
                            ("args" variable nil (reparse-symbol function_parameters) [8373 8378])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8380 8388]))                          
                        :documentation "
        Level-2, \"WARNING\": an issue that should be addressed. If ignored,
        there may be unpredictable problems with the output.
        ")
                        (reparse-symbol indented_block_body) [8355 8623])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8638 8642])
                            ("args" variable nil (reparse-symbol function_parameters) [8644 8649])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8651 8659]))                          
                        :documentation "
        Level-3, \"ERROR\": an error that should be addressed. If ignored, the
        output will contain errors.
        ")
                        (reparse-symbol indented_block_body) [8628 8869])
                    ("severe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8885 8889])
                            ("args" variable nil (reparse-symbol function_parameters) [8891 8896])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8898 8906]))                          
                        :documentation "
        Level-4, \"SEVERE\": a severe error that must be addressed. If ignored,
        the output will contain severe errors. Typically level-4 system
        messages are turned into exceptions which halt processing.
        ")
                        (reparse-symbol indented_block_body) [8874 9221]))                  
                :type "class")
                nil [757 9221])
            ("ExtensionOptionError" type
               (:superclasses ("DataError")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [9223 9267])
            ("BadOptionError" type
               (:superclasses ("ExtensionOptionError")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [9267 9316])
            ("BadOptionDataError" type
               (:superclasses ("ExtensionOptionError")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [9316 9369])
            ("DuplicateOptionError" type
               (:superclasses ("ExtensionOptionError")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [9369 9424])
            ("extract_extension_options" function
               (:documentation "
    Return a dictionary mapping extension option names to converted values.

    :Parameters:
        - `field_list`: A flat field list without field arguments, where each
          field body consists of a single paragraph only.
        - `options_spec`: Dictionary mapping known option names to a
          conversion function such as `int` or `float`.

    :Exceptions:
        - `KeyError` for unknown option names.
        - `ValueError` for invalid option values (raised by the conversion
           function).
        - `TypeError` for invalid option value types (raised by conversion
           function).
        - `DuplicateOptionError` for duplicate options.
        - `BadOptionError` for invalid fields.
        - `BadOptionDataError` for invalid option data (missing name,
          missing data, bad quotes, etc.).
    "
                :arguments 
                  ( ("field_list" variable nil (reparse-symbol function_parameters) [9456 9466])
                    ("options_spec" variable nil (reparse-symbol function_parameters) [9468 9480]))                  )
                nil [9426 10464])
            ("extract_options" function
               (:documentation "
    Return a list of option (name, value) pairs from field names & bodies.

    :Parameter:
        `field_list`: A flat field list, where each field name is a single
        word and each field body consists of a single paragraph only.

    :Exceptions:
        - `BadOptionError` for invalid fields.
        - `BadOptionDataError` for invalid option data (missing name,
          missing data, bad quotes, etc.).
    "
                :arguments 
                  ( ("field_list" variable nil (reparse-symbol function_parameters) [10485 10495]))                  )
                nil [10465 11694])
            ("assemble_option_dict" function
               (:documentation "
    Return a mapping of option names to values.

    :Parameters:
        - `option_list`: A list of (name, value) pairs (the output of
          `extract_options()`).
        - `options_spec`: Dictionary mapping known option names to a
          conversion function such as `int` or `float`.

    :Exceptions:
        - `KeyError` for unknown option names.
        - `DuplicateOptionError` for duplicate options.
        - `ValueError` for invalid option values (raised by conversion
           function).
        - `TypeError` for invalid option value types (raised by conversion
           function).
    "
                :arguments 
                  ( ("option_list" variable nil (reparse-symbol function_parameters) [11720 11731])
                    ("options_spec" variable nil (reparse-symbol function_parameters) [11733 11745]))                  )
                nil [11695 12954])
            ("NameValueError" type
               (:superclasses ("DataError")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [12956 12994])
            ("decode_path" function
               (:documentation "
    Ensure `path` is Unicode. Return `nodes.reprunicode` object.

    Decode file/path string in a failsave manner if not already done.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [13012 13016]))                  )
                nil [12996 13693])
            ("extract_name_value" function
               (:documentation "
    Return a list of (name, value) from a line of the form \"name=value ...\".

    :Exception:
        `NameValueError` for invalid input (missing name, missing data, bad
        quotes, etc.).
    "
                :arguments 
                  ( ("line" variable nil (reparse-symbol function_parameters) [13718 13722]))                  )
                nil [13695 15260])
            ("new_reporter" function
               (:documentation "
    Return a new Reporter object.

    :Parameters:
        `source` : string
            The path to or description of the source text of the document.
        `settings` : optparse.Values object
            Runtime settings.
    "
                :arguments 
                  ( ("source_path" variable nil (reparse-symbol function_parameters) [15278 15289])
                    ("settings" variable nil (reparse-symbol function_parameters) [15291 15299]))                  )
                nil [15261 15820])
            ("new_document" function
               (:documentation "
    Return a new empty document object.

    :Parameters:
        `source_path` : string
            The path to or description of the source text of the document.
        `settings` : optparse.Values object
            Runtime settings.  If none are provided, a default core set will
            be used.  If you will use the document object with any Docutils
            components, you must provide their default settings as well.  For
            example, if parsing, at least provide the parser settings,
            obtainable as follows::

                settings = docutils.frontend.OptionParser(
                    components=(docutils.parsers.rst.Parser,)
                    ).get_default_values()
    "
                :arguments 
                  ( ("source_path" variable nil (reparse-symbol function_parameters) [15838 15849])
                    ("settings" variable nil (reparse-symbol function_parameters) [15851 15859]))                  )
                nil [15821 16943])
            ("clean_rcs_keywords" function (:arguments 
              ( ("paragraph" variable nil (reparse-symbol function_parameters) [16967 16976])
                ("keyword_substitutions" variable nil (reparse-symbol function_parameters) [16978 16999]))              ) nil [16944 17332])
            ("relative_path" function
               (:documentation "
    Build and return a path to `target`, relative to `source` (both files).

    If there is no common prefix, return the absolute path to `target`.
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [17351 17357])
                    ("target" variable nil (reparse-symbol function_parameters) [17359 17365]))                  )
                nil [17333 18319])
            ("get_stylesheet_reference" function
               (:documentation "
    Retrieve a stylesheet reference from the settings object.

    Deprecated. Use get_stylesheet_list() instead to
    enable specification of multiple stylesheets as a comma-separated
    list.
    "
                :arguments 
                  ( ("settings" variable nil (reparse-symbol function_parameters) [18349 18357])
                    ("relative_to" variable nil (reparse-symbol function_parameters) [18359 18370]))                  )
                nil [18320 18928])
            ("get_stylesheet_list" function
               (:documentation "
    Retrieve list of stylesheet references from the settings object.
    "
                :arguments 
                  ( ("settings" variable nil (reparse-symbol function_parameters) [19361 19369]))                  )
                nil [19337 19999])
            ("find_file_in_dirs" function
               (:documentation "
    Search for `path` in the list of directories `dirs`.

    Return the first expansion that matches an existing file.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [20022 20026])
                    ("dirs" variable nil (reparse-symbol function_parameters) [20028 20032]))                  )
                nil [20000 20437])
            ("get_trim_footnote_ref_space" function
               (:documentation "
    Return whether or not to trim footnote space.

    If trim_footnote_reference_space is not None, return it.

    If trim_footnote_reference_space is None, return False unless the
    footnote reference style is 'superscript'.
    "
                :arguments 
                  ( ("settings" variable nil (reparse-symbol function_parameters) [20470 20478]))                  )
                nil [20438 20969])
            ("get_source_line" function
               (:documentation "
    Return the \"source\" and \"line\" attributes from the `node` given or from
    its closest ancestor.
    "
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [20990 20994]))                  )
                nil [20970 21259])
            ("escape2null" function
               (:documentation "Return a string with escape-backslashes converted to nulls."
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [21276 21280]))                  )
                nil [21260 23366])
            ("\"\"\"Mapping of result codes from `unicodedata.east_asian_widt()` to character
column widths.\"\"\"" code nil nil [23440 23534])
            ("column_width" function
               (:documentation "Return the column width of text.

    Correct ``len(text)`` for wide East Asian and combining Unicode chars.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [23553 23557]))                  )
                nil [23536 24081])
            ("uniq" function (:arguments 
              ( ("L" variable nil (reparse-symbol function_parameters) [24091 24092]))              ) nil [24082 24196])
            ("unique_combinations" function
               (:documentation "Return n-length tuples, in sorted order, no repeated elements"
                :arguments 
                  ( ("items" variable nil (reparse-symbol function_parameters) [24339 24344])
                    ("n" variable nil (reparse-symbol function_parameters) [24346 24347]))                  )
                nil [24315 24591])
            ("normalize_language_tag" function
               (:documentation "Return a list of normalized combinations for a `BCP 47` language tag.

    Example:

    >>> normalize_language_tag('de_AT-1901')
    ['de-at-1901', 'de-at', 'de-1901', 'de']
    "
                :arguments 
                  ( ("tag" variable nil (reparse-symbol function_parameters) [24619 24622]))                  )
                nil [24592 25348])
            ("DependencyList" type
               (:documentation "
    List of dependencies, with file recording support.

    Note that the output file is not automatically closed.  You have
    to explicitly call the close() method.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the dependency list, automatically setting the
        output file to `output_file` (see `set_output()`) and adding
        all supplied dependencies.
        \"\"\"" code nil (reparse-symbol indented_block_body) [25633 25818])
                            ("self" code nil (reparse-symbol indented_block_body) [25827 25855])
                            ("for" code nil (reparse-symbol indented_block_body) [25864 25911]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25583 25587])
                            ("output_file" variable nil (reparse-symbol function_parameters) [25589 25600])
                            ("dependencies" variable nil (reparse-symbol function_parameters) [25607 25619]))                          
                        :documentation "
        Initialize the dependency list, automatically setting the
        output file to `output_file` (see `set_output()`) and adding
        all supplied dependencies.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25570 25911])
                    ("set_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25931 25935])
                            ("output_file" variable nil (reparse-symbol function_parameters) [25937 25948]))                          
                        :documentation "
        Set the output file and clear the list of already added
        dependencies.

        `output_file` must be a string.  The specified file is
        immediately overwritten.

        If output_file is '-', the output will be written to stdout.
        If it is None, no file output is done when calling add().
        ")
                        (reparse-symbol indented_block_body) [25916 26633])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26646 26650])
                            ("filenames" variable nil (reparse-symbol function_parameters) [26652 26662]))                          
                        :documentation "
        If the dependency `filename` has not already been added,
        append it to self.list and print it to self.file if self.file
        is not None.
        ")
                        (reparse-symbol indented_block_body) [26638 27058])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27073 27077]))                          
                        :documentation "
        Close the output file.
        ")
                        (reparse-symbol indented_block_body) [27063 27186])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27204 27208]))                          )
                        (reparse-symbol indented_block_body) [27191 27407]))                  
                :type "class")
                nil [25350 27407]))          
      :file "__init__.py"
      :pointmax 27407
      :fsize 27412
      :lastmodtime '(21915 35728 0 0)
      :unmatched-syntax '((INDENT_BLOCK 23069 . 23366) (COLON 23055 . 23056) (DEDENT 23031 . 23031) (NAME 23031 . 23048) (LBRACE 23051 . 23052) (NEWLINE 22596 . 22597) (COLON 22595 . 22596) (RPAREN 22594 . 22595) (DEDENT 22571 . 22571) (DEF 22571 . 22574) (LPAREN 22589 . 22590) (NEWLINE 22283 . 22284) (COLON 22282 . 22283) (RPAREN 22281 . 22282) (DEDENT 22252 . 22252) (DEF 22252 . 22255) (LPAREN 22276 . 22277) (NEWLINE 22100 . 22101) (COLON 22099 . 22100) (RPAREN 22098 . 22099) (DEDENT 22068 . 22068) (DEF 22068 . 22071) (LPAREN 22093 . 22094) (NEWLINE 21954 . 21955) (COLON 21953 . 21954) (DEDENT 21945 . 21949) (ELSE 21949 . 21953) (NEWLINE 21744 . 21745) (COLON 21743 . 21744) (RPAREN 21742 . 21743) (DEDENT 21698 . 21698) (DEF 21698 . 21701) (LPAREN 21710 . 21711)))
    (semanticdb-table "error_reporting.py"
      :file "error_reporting.py"
      :fsize 7765
      :lastmodtime '(21915 35728 0 0)))
  :file "!drive_c!Python27!Lib!site-packages!docutils!utils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
