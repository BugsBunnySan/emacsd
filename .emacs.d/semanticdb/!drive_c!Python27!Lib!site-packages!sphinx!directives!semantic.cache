;; Object directives/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "directives/"
  :tables
  (list
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
    sphinx.directives
    ~~~~~~~~~~~~~~~~~

    Handlers for additional ReST directives.

    :copyright: Copyright 2007-2015 by the Sphinx team, see AUTHORS.
    :license: BSD, see LICENSE for details.
\"\"\"" code nil nil [25 236])
            ("re" include nil nil [238 247])
            ("docutils" include nil nil [249 275])
            ("docutils.parsers.rst" include nil nil [276 337])
            ("sphinx" include nil nil [339 366])
            ("sphinx.util.docfields" include nil nil [367 420])
            ("sphinx.directives.code" include nil nil [455 491])
            ("sphinx.directives.other" include nil nil [501 538])
            ("nl_escape_re" variable nil nil [581 615])
            ("strip_backslash_re" variable nil nil [616 657])
            ("ObjectDescription" type
               (:documentation "
    Directive to describe a class, function or similar object.  Not used
    directly, but subclassed (in domain-specific directives) to add custom
    behavior.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [879 897])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [902 924])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [929 951])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [956 988])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [993 1050])
                    ("doc_field_types" variable nil (reparse-symbol indented_block_body) [1137 1157])
                    ("get_signatures" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1182 1186]))                          
                        :documentation "
        Retrieve the signatures to document from the directive arguments.  By
        default, signatures are given as arguments, one per line.

        Backslash-escaping of newlines is supported.
        ")
                        (reparse-symbol indented_block_body) [1163 1638])
                    ("handle_signature" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1664 1668])
                            ("sig" variable nil (reparse-symbol function_parameters) [1670 1673])
                            ("signode" variable nil (reparse-symbol function_parameters) [1675 1682]))                          
                        :documentation "
        Parse the signature *sig* into individual nodes and append them to
        *signode*. If ValueError is raised, parsing is aborted and the whole
        *sig* is put into a single desc_name node.

        The return value should be a value that identifies the object.  It is
        passed to :meth:`add_target_and_index()` unchanged, and otherwise only
        used to skip duplicates.
        ")
                        (reparse-symbol indented_block_body) [1643 2128])
                    ("add_target_and_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2158 2162])
                            ("name" variable nil (reparse-symbol function_parameters) [2164 2168])
                            ("sig" variable nil (reparse-symbol function_parameters) [2170 2173])
                            ("signode" variable nil (reparse-symbol function_parameters) [2175 2182]))                          
                        :documentation "
        Add cross-reference IDs and entries to self.indexnode, if applicable.

        *name* is whatever :meth:`handle_signature()` returned.
        ")
                        (reparse-symbol indented_block_body) [2133 2392])
                    ("before_content" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2416 2420]))                          
                        :documentation "
        Called before parsing content. Used to set information about the current
        directive context on the build environment.
        ")
                        (reparse-symbol indented_block_body) [2397 2593])
                    ("after_content" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2616 2620]))                          
                        :documentation "
        Called after parsing content. Used to reset information about the
        current directive context on the build environment.
        ")
                        (reparse-symbol indented_block_body) [2598 2794])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2807 2811]))                          
                        :documentation "
        Main directive entry function, called by docutils upon encountering the
        directive.

        This directive is meant to be quite easily subclassable, so it delegates
        to several additional methods.  What it does:

        * find out if called as a domain-specific directive, set self.domain
        * create a `desc` node to fit all description inside
        * parse standard options, currently `noindex`
        * create an index node if needed as self.indexnode
        * parse all given signatures (as returned by self.get_signatures())
          using self.handle_signature(), which should either return a name
          or raise ValueError
        * add index entries using self.add_target_and_index()
        * parse the content and handle doc fields in it
        ")
                        (reparse-symbol indented_block_body) [2799 5884]))                  
                :type "class")
                nil [660 5884])
            ("DescDirective" variable nil nil [5917 5950])
            ("DefaultRole" type
               (:documentation "
    Set the default interpreted text role.  Overridden from docutils.
    "
                :superclasses ("Directive")
                :members 
                  ( ("optional_arguments" variable nil (reparse-symbol indented_block_body) [6074 6096])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [6101 6134])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6148 6152]))                          )
                        (reparse-symbol indented_block_body) [6140 6934]))                  
                :type "class")
                nil [5953 6934])
            ("DefaultDomain" type
               (:documentation "
    Directive to (re-)set the default domain for this source file.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [7056 7075])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [7080 7102])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [7107 7129])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [7134 7167])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [7172 7188])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7202 7206]))                          )
                        (reparse-symbol indented_block_body) [7194 7664]))                  
                :type "class")
                nil [6936 7664])
            ("directives" code nil nil [7666 7724])
            ("directives" code nil nil [7725 7787])
            ("directives" code nil nil [7788 7848])
            ("directives" code nil nil [7878 7936]))          
      :file "__init__.py"
      :pointmax 7937
      :fsize 7936
      :lastmodtime '(21915 35723 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "code.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
    sphinx.directives.code
    ~~~~~~~~~~~~~~~~~~~~~~

    :copyright: Copyright 2007-2015 by the Sphinx team, see AUTHORS.
    :license: BSD, see LICENSE for details.
\"\"\"" code nil nil [25 200])
            ("sys" include nil nil [202 212])
            ("codecs" include nil nil [213 226])
            ("difflib" include nil nil [227 259])
            ("docutils" include nil nil [261 287])
            ("docutils.parsers.rst" include nil nil [288 342])
            ("docutils.statemachine" include nil nil [343 385])
            ("six" include nil nil [387 415])
            ("sphinx" include nil nil [417 444])
            ("sphinx.util" include nil nil [445 481])
            ("sphinx.util.nodes" include nil nil [482 527])
            ("Highlight" type
               (:documentation "
    Directive to set the highlighting language for code blocks, as well
    as the threshold for line numbers.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [690 709])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [714 736])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [741 763])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [768 801])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [806 876])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [890 894]))                          )
                        (reparse-symbol indented_block_body) [882 1298]))                  
                :type "class")
                nil [530 1298])
            ("dedent_lines" function (:arguments 
              ( ("lines" variable nil (reparse-symbol function_parameters) [1317 1322])
                ("dedent" variable nil (reparse-symbol function_parameters) [1324 1330]))              ) nil [1300 1596])
            ("container_wrapper" function (:arguments 
              ( ("directive" variable nil (reparse-symbol function_parameters) [1620 1629])
                ("literal_node" variable nil (reparse-symbol function_parameters) [1631 1643])
                ("caption" variable nil (reparse-symbol function_parameters) [1645 1652]))              ) nil [1598 2239])
            ("CodeBlock" type
               (:documentation "
    Directive for a code block with special highlighting or line numbering
    settings.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [2379 2397])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [2402 2424])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [2429 2451])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [2456 2489])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [2494 2749])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2763 2767]))                          )
                        (reparse-symbol indented_block_body) [2755 4328]))                  
                :type "class")
                nil [2241 4328])
            ("LiteralInclude" type
               (:documentation "
    Like ``.. include:: :literal:``, but only warns if the include file is
    not found, and does not raise errors.  Also has several options for
    selecting what to include.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [4562 4581])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [4586 4608])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [4613 4635])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [4640 4672])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [4677 5434])
                    ("read_with_encoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5463 5467])
                            ("filename" variable nil (reparse-symbol function_parameters) [5469 5477])
                            ("document" variable nil (reparse-symbol function_parameters) [5479 5487])
                            ("codec_info" variable nil (reparse-symbol function_parameters) [5489 5499])
                            ("encoding" variable nil (reparse-symbol function_parameters) [5501 5509]))                          )
                        (reparse-symbol indented_block_body) [5440 6333])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6346 6350]))                          )
                        (reparse-symbol indented_block_body) [6338 13081]))                  
                :type "class")
                nil [4330 13081])
            ("directives" code nil nil [13083 13136])
            ("directives" code nil nil [13137 13194])
            ("directives" code nil nil [13202 13256])
            ("directives" code nil nil [13257 13311])
            ("directives" code nil nil [13312 13375]))          
      :file "code.py"
      :pointmax 13376
      :fsize 13375
      :lastmodtime '(21915 35723 0 0)
      :unmatched-syntax '((INDENT_BLOCK 10370 . 10449) (NEWLINE 10369 . 10370) (COLON 10368 . 10369) (TRY 10250 . 10253) (AS 10362 . 10364) (INDENT_BLOCK 9197 . 9276) (NEWLINE 9196 . 9197) (COLON 9195 . 9196) (TRY 9092 . 9095) (AS 9189 . 9191) (INDENT_BLOCK 6277 . 6333) (NEWLINE 6276 . 6277) (COLON 6275 . 6276) (FINALLY 6268 . 6275) (INDENT_BLOCK 3058 . 3184) (NEWLINE 3057 . 3058) (COLON 3056 . 3057) (TRY 2899 . 2902) (AS 3050 . 3052) (INDENT_BLOCK 6277 . 6333) (NEWLINE 6276 . 6277) (COLON 6275 . 6276) (FINALLY 6268 . 6275) (INDENT_BLOCK 3058 . 3184) (NEWLINE 3057 . 3058) (COLON 3056 . 3057) (TRY 2899 . 2902) (AS 3050 . 3052)))
    (semanticdb-table "other.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
    sphinx.directives.other
    ~~~~~~~~~~~~~~~~~~~~~~~

    :copyright: Copyright 2007-2015 by the Sphinx team, see AUTHORS.
    :license: BSD, see LICENSE for details.
\"\"\"" code nil nil [25 202])
            ("six.moves" include nil nil [204 231])
            ("docutils" include nil nil [232 258])
            ("docutils.parsers.rst" include nil nil [259 313])
            ("docutils.parsers.rst.directives.admonitions" include nil nil [314 384])
            ("docutils.parsers.rst.directives.misc" include nil nil [385 439])
            ("docutils.parsers.rst.directives.misc" include nil nil [440 511])
            ("sphinx" include nil nil [513 540])
            ("sphinx.locale" include nil nil [541 583])
            ("sphinx.util" include nil nil [584 628])
            ("sphinx.util.nodes" include nil nil [629 720])
            ("sphinx.util.matching" include nil nil [721 763])
            ("int_or_nothing" function (:arguments 
              ( ("argument" variable nil (reparse-symbol function_parameters) [785 793]))              ) nil [766 861])
            ("TocTree" type
               (:documentation "
    Directive to notify Sphinx about the hierarchical structure of the docs,
    and to include a table-of-contents like tree in the current document.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [1060 1078])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [1083 1105])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [1110 1132])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [1137 1170])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [1175 1494])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1508 1512]))                          )
                        (reparse-symbol indented_block_body) [1500 5067]))                  
                :type "class")
                nil [863 5067])
            ("Author" type
               (:documentation "
    Directive to give the name of the author of the current document
    or section. Shown in the output only if the show_authors option is on.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [5258 5277])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [5282 5304])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [5309 5331])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [5336 5368])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [5373 5389])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5403 5407]))                          )
                        (reparse-symbol indented_block_body) [5395 6126]))                  
                :type "class")
                nil [5069 6126])
            ("Index" type
               (:documentation "
    Directive to add entries to the index.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [6215 6234])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [6239 6261])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [6266 6288])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [6293 6325])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [6330 6346])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6360 6364]))                          )
                        (reparse-symbol indented_block_body) [6352 6925]))                  
                :type "class")
                nil [6128 6925])
            ("VersionChange" type
               (:documentation "
    Directive to describe a change/addition/deprecation in a specific version.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [7058 7076])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [7081 7103])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [7108 7130])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [7135 7167])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [7172 7188])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7202 7206]))                          )
                        (reparse-symbol indented_block_body) [7194 8880]))                  
                :type "class")
                nil [6927 8880])
            ("SeeAlso" type
               (:documentation "
    An admonition mentioning things to look at as reference.
    "
                :superclasses ("BaseAdmonition")
                :members 
                  ( ("node_class" variable nil (reparse-symbol indented_block_body) [8994 9023]))                  
                :type "class")
                nil [8882 9024])
            ("TabularColumns" type
               (:documentation "
    Directive to give an explicit tabulary column definition to LaTeX.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [9150 9169])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [9174 9196])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [9201 9223])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [9228 9260])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [9265 9281])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9295 9299]))                          )
                        (reparse-symbol indented_block_body) [9287 9444]))                  
                :type "class")
                nil [9026 9444])
            ("Centered" type
               (:documentation "
    Directive to create a centered line of bold text.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [9547 9566])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [9571 9593])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [9598 9620])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [9625 9657])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [9662 9678])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9692 9696]))                          )
                        (reparse-symbol indented_block_body) [9684 9989]))                  
                :type "class")
                nil [9446 9989])
            ("Acks" type
               (:documentation "
    Directive for a list of names.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [10069 10087])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [10092 10114])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [10119 10141])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [10146 10179])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [10184 10200])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10214 10218]))                          )
                        (reparse-symbol indented_block_body) [10206 10661]))                  
                :type "class")
                nil [9991 10661])
            ("HList" type
               (:documentation "
    Directive for a list that gets compacted horizontally.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [10766 10784])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [10789 10811])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [10816 10838])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [10843 10876])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [10881 10926])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10940 10944]))                          )
                        (reparse-symbol indented_block_body) [10932 11954]))                  
                :type "class")
                nil [10663 11954])
            ("Only" type
               (:documentation "
    Directive to only include text if the given tag(s) are enabled.
    "
                :superclasses ("Directive")
                :members 
                  ( ("has_content" variable nil (reparse-symbol indented_block_body) [12067 12085])
                    ("required_arguments" variable nil (reparse-symbol indented_block_body) [12090 12112])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [12117 12139])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [12144 12176])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [12181 12197])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12211 12215]))                          )
                        (reparse-symbol indented_block_body) [12203 14275]))                  
                :type "class")
                nil [11956 14275])
            ("Include" type
               (:documentation "
    Like the standard \"Include\" directive, but interprets absolute paths
    \"correctly\", i.e. relative to source directory.
    "
                :superclasses ("BaseInclude")
                :members 
                  ( ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14459 14463]))                          )
                        (reparse-symbol indented_block_body) [14451 14860]))                  
                :type "class")
                nil [14277 14860])
            ("directives" code nil nil [14862 14911])
            ("directives" code nil nil [14912 14966])
            ("directives" code nil nil [14967 15020])
            ("directives" code nil nil [15021 15072])
            ("directives" code nil nil [15073 15118])
            ("directives" code nil nil [15119 15177])
            ("directives" code nil nil [15178 15238])
            ("directives" code nil nil [15239 15301])
            ("directives" code nil nil [15302 15351])
            ("directives" code nil nil [15352 15415])
            ("directives" code nil nil [15416 15467])
            ("directives" code nil nil [15468 15511])
            ("directives" code nil nil [15512 15557])
            ("directives" code nil nil [15558 15601])
            ("directives" code nil nil [15602 15651])
            ("directives" code nil nil [15759 15807])
            ("directives" code nil nil [15874 15923]))          
      :file "other.py"
      :pointmax 15924
      :fsize 15923
      :lastmodtime '(21915 35723 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Python27!Lib!site-packages!sphinx!directives!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
