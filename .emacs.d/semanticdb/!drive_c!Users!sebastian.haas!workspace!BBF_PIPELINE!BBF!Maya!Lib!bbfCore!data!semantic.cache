;; Object data/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "data/"
  :tables
  (list
    (semanticdb-table "name.py"
      :major-mode 'python-mode
      :tags 
        '( ("re" include nil nil [1 10])
            ("Name" type
               (:superclasses ("str")
                :members 
                  ( ("'''
    This class expands string functionality based on the naming convention. It
    can be initialized from a string, pynode or core node. Its functionality 
    doesn't enforce a strict naming convention, but it is suggested to use 
    the following:

    PART(_SIDE)_description(_TYPE)

    Part: groups nodes of the same setup. For instance SPINE is added on all
    nodes that make up the spine SETUP. The part should be uppercase
    alphanumeric characters.

    Side: further differentiates nodes of the same setup, and can be used for
    mirroring. For instance ARM_L and ARM_R are two different arm setups, but
    the side gives us information for mirroring. Sides can only be 'L' or 'R'.
    If a character has 4 legs, you would use FRONTLEG_L, BACKLEG_L, FRONTLEG_R
    and BACKLEG_R.

    Description: outlines the specific functionality of the node. It may have
    multiple underscore-separated subcomponents, each more specific than the
    last. For instance lowerArm_stretch is part of the stretch system of the
    lower arm. Valid characters are letters and numbers, camelCase.

    Type: (optionally) defines the node type for easy selection of similar 
    (DAG) nodes in the rig. For instance a control would be a CTRL type and a
    skin joint would be SKJNT. The type is mostly relevant for transforms and
    can be omitted on non-DAG nodes.

    Some examples:
    ARM_L_wrist_CTRL            - the wrist control of the left arm
    SPINE_topIk_CTRL            - the top IK control of the spine
    ARM_L_wrist_zero_RG         - the group that zeroes out the wrist control
    ARM_L_wrist_stretch_ratio   - a node part of the stretch system
    '''" code nil (reparse-symbol indented_block_body) [34 1714])
                    ("__init__" function
                       (:suite 
                          ( ("''' Initializes from the name from the given string (or pynode). '''" code nil (reparse-symbol indented_block_body) [1756 1824])
                            ("super" code nil (reparse-symbol indented_block_body) [1833 1867]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1733 1737])
                            ("string" variable nil (reparse-symbol function_parameters) [1739 1745]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1720 1868])
                    ("isLeft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1884 1888]))                          )
                        (reparse-symbol indented_block_body) [1873 2094])
                    ("isRight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2111 2115]))                          )
                        (reparse-symbol indented_block_body) [2099 2324])
                    ("getSide" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2341 2345]))                          )
                        (reparse-symbol indented_block_body) [2329 2584])
                    ("mirror" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2600 2604]))                          )
                        (reparse-symbol indented_block_body) [2589 3107])
                    ("getSuffix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3126 3130]))                          )
                        (reparse-symbol indented_block_body) [3112 3349])
                    ("setSuffix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3368 3372])
                            ("suffix" variable nil (reparse-symbol function_parameters) [3374 3380]))                          )
                        (reparse-symbol indented_block_body) [3354 3725])
                    ("appendDescription" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3752 3756])
                            ("description" variable nil (reparse-symbol function_parameters) [3758 3769]))                          )
                        (reparse-symbol indented_block_body) [3730 4207]))                  
                :type "class")
                nil [13 4207]))          
      :file "name.py"
      :pointmax 4207
      :fsize 4311
      :lastmodtime '(21909 2936 0 0)
      :unmatched-syntax '((RETURN 4158 . 4164) (IF 4188 . 4190) (ELSE 4198 . 4202) (NAME 4033 . 4037) (IF 4073 . 4075) (ELSE 4083 . 4087)))
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags nil
      :file "__init__.py"
      :pointmax 1
      :fsize 0
      :lastmodtime '(21919 61102 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "color.py"
      :major-mode 'python-mode
      :tags 
        '( ("pymel.core" include nil nil [1 24])
            ("PALETTE_SIZE" variable nil nil [27 44])
            ("ZERO_COLOR" variable nil nil [45 75])
            ("RGBColor" type
               (:superclasses ("tuple")
                :members 
                  ( ("'''
    Base color class that stores RGB information as a tuple of floats. The
    channel values are between 0 and 1.
    '''" code nil (reparse-symbol indented_block_body) [105 231])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [249 252])
                        ("rgb" variable nil (reparse-symbol function_parameters) [254 257]))                      ) (reparse-symbol indented_block_body) [237 402])
                    ("r" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [427 431]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [407 511])
                    ("g" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [536 540]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [516 622])
                    ("b" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [647 651]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [627 733])
                    ("hex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [760 764]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [738 954]))                  
                :type "class")
                nil [78 954])
            ("IndexColor" type
               (:superclasses ("RGBColor")
                :members 
                  ( ("'''
    Color class based on Maya's index palette, used by the overrideColor
    attribute on DAG nodes.
    '''" code nil (reparse-symbol indented_block_body) [988 1100])
                    ("listAll" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1135 1138]))                          )
                        (reparse-symbol indented_block_body) [1106 1276])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1293 1296])
                        ("index" variable nil (reparse-symbol function_parameters) [1298 1303]))                      ) (reparse-symbol indented_block_body) [1281 1701])
                    ("__init__" function
                       (:suite 
                          ( ("''' Initializes from the given palette index. '''" code nil (reparse-symbol indented_block_body) [1741 1790])
                            ("self" variable nil (reparse-symbol indented_block_body) [1799 1818]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1719 1723])
                            ("index" variable nil (reparse-symbol function_parameters) [1725 1730]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1706 1819])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1848 1852]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1824 1937]))                  
                :type "class")
                nil [956 1937]))          
      :file "color.py"
      :pointmax 1937
      :fsize 2003
      :lastmodtime '(21896 15490 0 0)
      :unmatched-syntax '((NAME 1585 . 1588) (IF 1620 . 1622) (ELSE 1629 . 1633))))
  :file "!drive_c!Users!sebastian.haas!workspace!BBF_PIPELINE!BBF!Maya!Lib!bbfCore!data!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
