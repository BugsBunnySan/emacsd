;; Object rst/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "rst/"
  :tables
  (list
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
This is ``docutils.parsers.rst`` package. It exports a single class, `Parser`,
the reStructuredText parser.


Usage
=====

1. Create a parser::

       parser = docutils.parsers.rst.Parser()

   Several optional arguments may be passed to modify the parser's behavior.
   Please see `Customizing the Parser`_ below for details.

2. Gather input (a multi-line string), by reading a file or the standard
   input::

       input = sys.stdin.read()

3. Create a new empty `docutils.nodes.document` tree::

       document = docutils.utils.new_document(source, settings)

   See `docutils.utils.new_document()` for parameter details.

4. Run the parser, populating the document tree::

       parser.parse(input, document)


Parser Overview
===============

The reStructuredText parser is implemented as a state machine, examining its
input one line at a time. To understand how the parser works, please first
become familiar with the `docutils.statemachine` module, then see the
`states` module.


Customizing the Parser
----------------------

Anything that isn't already customizable is that way simply because that type
of customizability hasn't been implemented yet.  Patches welcome!

When instantiating an object of the `Parser` class, two parameters may be
passed: ``rfc2822`` and ``inliner``.  Pass ``rfc2822=True`` to enable an
initial RFC-2822 style header block, parsed as a \"field_list\" element (with
\"class\" attribute set to \"rfc2822\").  Currently this is the only body-level
element which is customizable without subclassing.  (Tip: subclass `Parser`
and change its \"state_classes\" and \"initial_state\" attributes to refer to new
classes. Contact the author if you need more details.)

The ``inliner`` parameter takes an instance of `states.Inliner` or a subclass.
It handles inline markup recognition.  A common extension is the addition of
further implicit hyperlinks, like \"RFC 2822\".  This can be done by subclassing
`states.Inliner`, adding a new method for the implicit markup, and adding a
``(pattern, method)`` pair to the \"implicit_dispatch\" attribute of the
subclass.  See `states.Inliner.implicit_inline()` for details.  Explicit
inline markup can be customized in a `states.Inliner` subclass via the
``patterns.initial`` and ``dispatch`` attributes (and new methods as
appropriate).
\"\"\"" code nil nil [163 2475])
            ("__docformat__" variable nil nil [2477 2511])
            ("docutils.parsers" include nil nil [2514 2537])
            ("docutils.statemachine" include nil nil [2538 2566])
            ("docutils.parsers.rst" include nil nil [2567 2606])
            ("docutils" include nil nil [2607 2654])
            ("docutils.transforms" include nil nil [2655 2696])
            ("Parser" type
               (:documentation "The reStructuredText parser."
                :superclasses ("docutils.parsers.Parser")
                :members 
                  ( ("supported" variable nil (reparse-symbol indented_block_body) [2783 2855])
                    ("\"\"\"Aliases this parser supports.\"\"\"" code nil (reparse-symbol indented_block_body) [2860 2895])
                    ("settings_spec" variable nil (reparse-symbol indented_block_body) [2901 6040])
                    ("config_section" variable nil (reparse-symbol indented_block_body) [6046 6088])
                    ("config_section_dependencies" variable nil (reparse-symbol indented_block_body) [6093 6135])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6198 6311])
                            ("self" variable nil (reparse-symbol indented_block_body) [6319 6360])
                            ("self" variable nil (reparse-symbol indented_block_body) [6369 6391]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6154 6158])
                            ("rfc2822" variable nil (reparse-symbol function_parameters) [6160 6167])
                            ("inliner" variable nil (reparse-symbol function_parameters) [6175 6182]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6141 6392])
                    ("get_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6416 6420]))                          )
                        (reparse-symbol indented_block_body) [6397 6508])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6523 6527])
                            ("inputstring" variable nil (reparse-symbol function_parameters) [6529 6540])
                            ("document" variable nil (reparse-symbol function_parameters) [6542 6550]))                          
                        :documentation "Parse `inputstring` and populate `document`, a document tree.")
                        (reparse-symbol indented_block_body) [6513 7139]))                  
                :type "class")
                nil [2699 7139])
            ("DirectiveError" type
               (:documentation "
    Store a message and a system message level.

    To be thrown from inside directive code.

    Do not instantiate directly -- use `Directive.directive_error()`
    instead!
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Set error `message` and `level`\"\"\"" code nil (reparse-symbol indented_block_body) [7417 7454])
                            ("Exception" code nil (reparse-symbol indented_block_body) [7463 7487])
                            ("self" variable nil (reparse-symbol indented_block_body) [7496 7514])
                            ("self" variable nil (reparse-symbol indented_block_body) [7523 7541]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7386 7390])
                            ("level" variable nil (reparse-symbol function_parameters) [7392 7397])
                            ("message" variable nil (reparse-symbol function_parameters) [7399 7406]))                          
                        :documentation "Set error `message` and `level`"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7373 7542]))                  
                :type "class")
                nil [7141 7542])
            ("Directive" type
               (:documentation "
    Base class for reStructuredText directives.

    The following attributes may be set by subclasses.  They are
    interpreted by the directive parser (which runs the directive
    class):

    - `required_arguments`: The number of required arguments (default:
      0).

    - `optional_arguments`: The number of optional arguments (default:
      0).

    - `final_argument_whitespace`: A boolean, indicating if the final
      argument may contain whitespace (default: False).

    - `option_spec`: A dictionary, mapping known option names to
      conversion functions such as `int` or `float` (default: {}, no
      options).  Several conversion functions are defined in the
      directives/__init__.py module.

      Option conversion functions take a single parameter, the option
      argument (a string or ``None``), validate it and/or convert it
      to the appropriate form.  Conversion functions may raise
      `ValueError` and `TypeError` exceptions.

    - `has_content`: A boolean; True if content is allowed.  Client
      code must handle the case where content is required but not
      supplied (an empty content list will be supplied).

    Arguments are normally single whitespace-separated words.  The
    final argument may contain whitespace and/or newlines if
    `final_argument_whitespace` is True.

    If the form of the arguments is more complex, specify only one
    argument (either required or optional) and set
    `final_argument_whitespace` to True; the client code must do any
    context-sensitive parsing.

    When a directive implementation is being run, the directive class
    is instantiated, and the `run()` method is executed.  During
    instantiation, the following instance variables are set:

    - ``name`` is the directive type or name (string).

    - ``arguments`` is the list of positional arguments (strings).

    - ``options`` is a dictionary mapping option names (strings) to
      values (type depends on option conversion functions; see
      `option_spec` above).

    - ``content`` is a list of strings, the directive content line by line.

    - ``lineno`` is the absolute line number of the first line
      of the directive.

    - ``src`` is the name (or path) of the rst source of the directive.

    - ``srcline`` is the line number of the first line of the directive
      in its source. It may differ from ``lineno``, if the main source
      includes other sources with the ``.. include::`` directive.

    - ``content_offset`` is the line offset of the first line of the content from
      the beginning of the current input.  Used when initiating a nested parse.

    - ``block_text`` is a string containing the entire directive.

    - ``state`` is the state which called the directive function.

    - ``state_machine`` is the state machine which controls the state which called
      the directive function.

    Directive functions return a list of nodes which will be inserted
    into the document tree at the point where the directive was
    encountered.  This can be an empty list if there is nothing to
    insert.

    For ordinary directives, the list must contain body elements or
    structural elements.  Some directives are intended specifically
    for substitution definitions, and must return a list of `Text`
    nodes and/or inline elements (suitable for inline insertion, in
    place of the substitution reference).  Such directives must verify
    substitution definition context, typically using code like this::

        if not isinstance(state, states.SubstitutionDef):
            error = state_machine.reporter.error(
                'Invalid context: the \"%s\" directive can only be used '
                'within a substitution definition.' % (name),
                nodes.literal_block(block_text, block_text), line=lineno)
            return [error]
    "
                :superclasses ("object")
                :members 
                  ( ("required_arguments" variable nil (reparse-symbol indented_block_body) [11654 11676])
                    ("\"\"\"Number of required directive arguments.\"\"\"" code nil (reparse-symbol indented_block_body) [11681 11726])
                    ("optional_arguments" variable nil (reparse-symbol indented_block_body) [11732 11754])
                    ("\"\"\"Number of optional arguments after the required arguments.\"\"\"" code nil (reparse-symbol indented_block_body) [11759 11823])
                    ("final_argument_whitespace" variable nil (reparse-symbol indented_block_body) [11829 11862])
                    ("\"\"\"May the final argument contain whitespace?\"\"\"" code nil (reparse-symbol indented_block_body) [11867 11915])
                    ("option_spec" variable nil (reparse-symbol indented_block_body) [11921 11939])
                    ("\"\"\"Mapping of option names to validator functions.\"\"\"" code nil (reparse-symbol indented_block_body) [11944 11997])
                    ("has_content" variable nil (reparse-symbol indented_block_body) [12003 12022])
                    ("\"\"\"May the directive have content?\"\"\"" code nil (reparse-symbol indented_block_body) [12027 12064])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12208 12224])
                            ("self" variable nil (reparse-symbol indented_block_body) [12233 12259])
                            ("self" variable nil (reparse-symbol indented_block_body) [12268 12290])
                            ("self" variable nil (reparse-symbol indented_block_body) [12299 12321])
                            ("self" variable nil (reparse-symbol indented_block_body) [12330 12350])
                            ("self" variable nil (reparse-symbol indented_block_body) [12359 12395])
                            ("self" variable nil (reparse-symbol indented_block_body) [12404 12432])
                            ("self" variable nil (reparse-symbol indented_block_body) [12441 12459])
                            ("self" variable nil (reparse-symbol indented_block_body) [12468 12502]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12083 12087])
                            ("name" variable nil (reparse-symbol function_parameters) [12089 12093])
                            ("arguments" variable nil (reparse-symbol function_parameters) [12095 12104])
                            ("options" variable nil (reparse-symbol function_parameters) [12106 12113])
                            ("content" variable nil (reparse-symbol function_parameters) [12115 12122])
                            ("lineno" variable nil (reparse-symbol function_parameters) [12124 12130])
                            ("content_offset" variable nil (reparse-symbol function_parameters) [12149 12163])
                            ("block_text" variable nil (reparse-symbol function_parameters) [12165 12175])
                            ("state" variable nil (reparse-symbol function_parameters) [12177 12182])
                            ("state_machine" variable nil (reparse-symbol function_parameters) [12184 12197]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12070 12503])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12516 12520]))                          )
                        (reparse-symbol indented_block_body) [12508 12593])
                    ("directive_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12643 12647])
                            ("level" variable nil (reparse-symbol function_parameters) [12649 12654])
                            ("message" variable nil (reparse-symbol function_parameters) [12656 12663]))                          
                        :documentation "
        Return a DirectiveError suitable for being thrown as an exception.

        Call \"raise self.directive_error(level, message)\" from within
        a directive implementation to return one single system message
        at level `level`, which automatically gets the directive block
        and the line number added.

        Preferably use the `debug`, `info`, `warning`, `error`, or `severe`
        wrapper methods, e.g. ``self.error(message)`` to generate an
        ERROR-level directive error.
        ")
                        (reparse-symbol indented_block_body) [12623 13242])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13257 13261])
                            ("message" variable nil (reparse-symbol function_parameters) [13263 13270]))                          )
                        (reparse-symbol indented_block_body) [13247 13321])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13335 13339])
                            ("message" variable nil (reparse-symbol function_parameters) [13341 13348]))                          )
                        (reparse-symbol indented_block_body) [13326 13399])
                    ("warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13416 13420])
                            ("message" variable nil (reparse-symbol function_parameters) [13422 13429]))                          )
                        (reparse-symbol indented_block_body) [13404 13480])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13495 13499])
                            ("message" variable nil (reparse-symbol function_parameters) [13501 13508]))                          )
                        (reparse-symbol indented_block_body) [13485 13559])
                    ("severe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13575 13579])
                            ("message" variable nil (reparse-symbol function_parameters) [13581 13588]))                          )
                        (reparse-symbol indented_block_body) [13564 13639])
                    ("assert_has_content" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13695 13699]))                          
                        :documentation "
        Throw an ERROR-level DirectiveError if the directive doesn't
        have contents.
        ")
                        (reparse-symbol indented_block_body) [13672 13982])
                    ("add_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14000 14004])
                            ("node" variable nil (reparse-symbol function_parameters) [14006 14010]))                          
                        :documentation "Append self.options['name'] to node['names'] if it exists.

        Also normalize the name string and register it as explicit target.
        ")
                        (reparse-symbol indented_block_body) [13987 14447]))                  
                :type "class")
                nil [7544 14447])
            ("convert_directive_function" function
               (:documentation "
    Define & return a directive class generated from `directive_fn`.

    `directive_fn` uses the old-style, functional interface.
    "
                :arguments 
                  ( ("directive_fn" variable nil (reparse-symbol function_parameters) [14480 14492]))                  )
                nil [14449 15298]))          
      :file "__init__.py"
      :pointmax 15298
      :fsize 15297
      :lastmodtime '(21915 35728 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Python27!Lib!site-packages!docutils!parsers!rst!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
